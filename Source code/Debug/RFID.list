
RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080035f0  080035f0  000135f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003658  08003658  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003658  08003658  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003658  08003658  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000074  080036d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080036d4  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092bd  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182d  00000000  00000000  0002935a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172d2  00000000  00000000  0002be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2ab  00000000  00000000  000430e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b84  00000000  00000000  0004d38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4f11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af8  00000000  00000000  000d4f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080035d4 	.word	0x080035d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080035d4 	.word	0x080035d4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <button_reading>:
		flagForButtonPress[i]=0;
		flagForButtonPress1s[i]=0;
		counterForButtonPress1s[i]=DURATION_FOR_AUTO_INCREASING;
	}
}
void button_reading ( void ){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	for ( int i = 0; i < N0_OF_BUTTONS ; i ++){
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	e08e      	b.n	8000b92 <button_reading+0x12a>
		debounceButtonBuffer3 [i] = debounceButtonBuffer2 [i];
 8000a74:	4a4b      	ldr	r2, [pc, #300]	; (8000ba4 <button_reading+0x13c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	7819      	ldrb	r1, [r3, #0]
 8000a7c:	4a4a      	ldr	r2, [pc, #296]	; (8000ba8 <button_reading+0x140>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	460a      	mov	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 8000a86:	4a49      	ldr	r2, [pc, #292]	; (8000bac <button_reading+0x144>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	7819      	ldrb	r1, [r3, #0]
 8000a8e:	4a45      	ldr	r2, [pc, #276]	; (8000ba4 <button_reading+0x13c>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	460a      	mov	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin(GPIOA, LOCK_Pin*pow(2,i));
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fcab 	bl	80003f4 <__aeabi_i2d>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	f04f 0000 	mov.w	r0, #0
 8000aa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000aaa:	f001 fe03 	bl	80026b4 <pow>
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <button_reading+0x148>)
 8000ab4:	f7ff fd08 	bl	80004c8 <__aeabi_dmul>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	460b      	mov	r3, r1
 8000abc:	4610      	mov	r0, r2
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f7ff ffb2 	bl	8000a28 <__aeabi_d2uiz>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	4619      	mov	r1, r3
 8000aca:	483a      	ldr	r0, [pc, #232]	; (8000bb4 <button_reading+0x14c>)
 8000acc:	f000 fdae 	bl	800162c <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4a35      	ldr	r2, [pc, #212]	; (8000bac <button_reading+0x144>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	460a      	mov	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
		if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i] && debounceButtonBuffer2[i]==debounceButtonBuffer3[i]) {
 8000ade:	4a33      	ldr	r2, [pc, #204]	; (8000bac <button_reading+0x144>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	492f      	ldr	r1, [pc, #188]	; (8000ba4 <button_reading+0x13c>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	440b      	add	r3, r1
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d14c      	bne.n	8000b8c <button_reading+0x124>
 8000af2:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <button_reading+0x13c>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	492b      	ldr	r1, [pc, #172]	; (8000ba8 <button_reading+0x140>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	440b      	add	r3, r1
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d142      	bne.n	8000b8c <button_reading+0x124>
			if (buttonBuffer[i] != debounceButtonBuffer3 [i]) {
 8000b06:	4a2c      	ldr	r2, [pc, #176]	; (8000bb8 <button_reading+0x150>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	4926      	ldr	r1, [pc, #152]	; (8000ba8 <button_reading+0x140>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	440b      	add	r3, r1
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d019      	beq.n	8000b4e <button_reading+0xe6>
				buttonBuffer [i] = debounceButtonBuffer3 [i];
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <button_reading+0x140>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	7819      	ldrb	r1, [r3, #0]
 8000b22:	4a25      	ldr	r2, [pc, #148]	; (8000bb8 <button_reading+0x150>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	460a      	mov	r2, r1
 8000b2a:	701a      	strb	r2, [r3, #0]
				if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 8000b2c:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <button_reading+0x150>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d129      	bne.n	8000b8c <button_reading+0x124>
					flagForButtonPress [i]=1;
 8000b38:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <button_reading+0x154>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counterForButtonPress1s [i]=DURATION_FOR_AUTO_INCREASING;
 8000b42:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <button_reading+0x158>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2164      	movs	r1, #100	; 0x64
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b4c:	e01e      	b.n	8000b8c <button_reading+0x124>
				}
			}
			else {
				if (buttonBuffer[i]==BUTTON_IS_PRESSED) {
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <button_reading+0x150>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d118      	bne.n	8000b8c <button_reading+0x124>
					counterForButtonPress1s [i]--;
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <button_reading+0x158>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	4916      	ldr	r1, [pc, #88]	; (8000bc0 <button_reading+0x158>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (counterForButtonPress1s[i]<=0) {
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <button_reading+0x158>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	dc09      	bgt.n	8000b8c <button_reading+0x124>
						flagForButtonPress1s[i]=1;
 8000b78:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <button_reading+0x15c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						buttonBuffer[i]=0;
 8000b82:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <button_reading+0x150>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
	for ( int i = 0; i < N0_OF_BUTTONS ; i ++){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	f77f af6d 	ble.w	8000a74 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000098 	.word	0x20000098
 8000ba8:	2000009c 	.word	0x2000009c
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	40b00000 	.word	0x40b00000
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	20000090 	.word	0x20000090
 8000bbc:	200000f0 	.word	0x200000f0
 8000bc0:	200000d0 	.word	0x200000d0
 8000bc4:	200000e0 	.word	0x200000e0

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 fa3a 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f812 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000bd4:	f000 f84c 	bl	8000c70 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000bd8:	f000 f896 	bl	8000d08 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <main+0x28>)
 8000bde:	f001 f98d 	bl	8001efc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <main+0x2c>)
 8000be8:	f000 fd37 	bl	800165a <HAL_GPIO_WritePin>
 8000bec:	e7f9      	b.n	8000be2 <main+0x1a>
 8000bee:	bf00      	nop
 8000bf0:	20000100 	.word	0x20000100
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	; 0x40
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	2228      	movs	r2, #40	; 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fd4c 	bl	80026a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c22:	2310      	movs	r3, #16
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fd2c 	bl	800168c <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c3a:	f000 f8cb 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 ff98 	bl	8001b8c <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c62:	f000 f8b7 	bl	8000dd4 <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3740      	adds	r7, #64	; 0x40
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000c96:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000ca4:	2209      	movs	r2, #9
 8000ca6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000cb6:	f001 f8d1 	bl	8001e5c <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cc0:	f000 f888 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000cd2:	f001 fa6d 	bl	80021b0 <HAL_TIM_ConfigClockSource>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cdc:	f000 f87a 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_TIM2_Init+0x94>)
 8000cee:	f001 fc3f 	bl	8002570 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f000 f86c 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000100 	.word	0x20000100

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_GPIO_Init+0xa8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIGNAL_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2160      	movs	r1, #96	; 0x60
 8000d50:	4818      	ldr	r0, [pc, #96]	; (8000db4 <MX_GPIO_Init+0xac>)
 8000d52:	f000 fc82 	bl	800165a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8000d56:	2320      	movs	r3, #32
 8000d58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2302      	movs	r3, #2
 8000d64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4811      	ldr	r0, [pc, #68]	; (8000db4 <MX_GPIO_Init+0xac>)
 8000d6e:	f000 fad9 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000d72:	2340      	movs	r3, #64	; 0x40
 8000d74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4619      	mov	r1, r3
 8000d88:	480a      	ldr	r0, [pc, #40]	; (8000db4 <MX_GPIO_Init+0xac>)
 8000d8a:	f000 facb 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOCK_Pin UNLOCK_Pin REGISTER_Pin RESET_Pin */
  GPIO_InitStruct.Pin = LOCK_Pin|UNLOCK_Pin|REGISTER_Pin|RESET_Pin;
 8000d8e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_GPIO_Init+0xb0>)
 8000da4:	f000 fabe 	bl	8001324 <HAL_GPIO_Init>

}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	timeRun();
 8000dc4:	f000 f80c 	bl	8000de0 <timeRun>
	button_reading();
 8000dc8:	f7ff fe4e 	bl	8000a68 <button_reading>

}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <timeRun>:
void setTimer6(int duration) {
	timer6_counter=duration;
	timer6_flag=0;
}

void timeRun() {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	if (timer1_counter>0) {
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <timeRun+0xcc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	dd0b      	ble.n	8000e04 <timeRun+0x24>
		timer1_counter--;
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <timeRun+0xcc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	4a2e      	ldr	r2, [pc, #184]	; (8000eac <timeRun+0xcc>)
 8000df4:	6013      	str	r3, [r2, #0]
		if (timer1_counter<=0) {
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <timeRun+0xcc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dc02      	bgt.n	8000e04 <timeRun+0x24>
			timer1_flag=1;
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <timeRun+0xd0>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter>0) {
 8000e04:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <timeRun+0xd4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	dd0b      	ble.n	8000e24 <timeRun+0x44>
		timer2_counter--;
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <timeRun+0xd4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <timeRun+0xd4>)
 8000e14:	6013      	str	r3, [r2, #0]
		if (timer2_counter<=0) {
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <timeRun+0xd4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	dc02      	bgt.n	8000e24 <timeRun+0x44>
			timer2_flag=1;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <timeRun+0xd8>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter>0) {
 8000e24:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <timeRun+0xdc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	dd0b      	ble.n	8000e44 <timeRun+0x64>
		timer3_counter--;
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <timeRun+0xdc>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <timeRun+0xdc>)
 8000e34:	6013      	str	r3, [r2, #0]
		if (timer3_counter<=0) {
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <timeRun+0xdc>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dc02      	bgt.n	8000e44 <timeRun+0x64>
			timer3_flag=1;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <timeRun+0xe0>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter>0) {
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <timeRun+0xe4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	dd0b      	ble.n	8000e64 <timeRun+0x84>
		timer4_counter--;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <timeRun+0xe4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <timeRun+0xe4>)
 8000e54:	6013      	str	r3, [r2, #0]
		if (timer4_counter<=0) {
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <timeRun+0xe4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dc02      	bgt.n	8000e64 <timeRun+0x84>
			timer4_flag=1;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <timeRun+0xe8>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter>0) {
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <timeRun+0xec>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dd0b      	ble.n	8000e84 <timeRun+0xa4>
		timer5_counter--;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <timeRun+0xec>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <timeRun+0xec>)
 8000e74:	6013      	str	r3, [r2, #0]
		if (timer5_counter<=0) {
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <timeRun+0xec>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dc02      	bgt.n	8000e84 <timeRun+0xa4>
			timer5_flag=1;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <timeRun+0xf0>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter>0) {
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <timeRun+0xf4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	dd0b      	ble.n	8000ea4 <timeRun+0xc4>
		timer6_counter--;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <timeRun+0xf4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <timeRun+0xf4>)
 8000e94:	6013      	str	r3, [r2, #0]
		if (timer6_counter<=0) {
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <timeRun+0xf4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	dc02      	bgt.n	8000ea4 <timeRun+0xc4>
			timer6_flag=1;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <timeRun+0xf8>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	200000a4 	.word	0x200000a4
 8000eb0:	200000a0 	.word	0x200000a0
 8000eb4:	200000ac 	.word	0x200000ac
 8000eb8:	200000a8 	.word	0x200000a8
 8000ebc:	200000b4 	.word	0x200000b4
 8000ec0:	200000b0 	.word	0x200000b0
 8000ec4:	200000bc 	.word	0x200000bc
 8000ec8:	200000b8 	.word	0x200000b8
 8000ecc:	200000c4 	.word	0x200000c4
 8000ed0:	200000c0 	.word	0x200000c0
 8000ed4:	200000cc 	.word	0x200000cc
 8000ed8:	200000c8 	.word	0x200000c8

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_MspInit+0x5c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_MspInit+0x60>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_MspInit+0x60>)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000

08000f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f50:	d113      	bne.n	8000f7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_TIM_Base_MspInit+0x44>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_TIM_Base_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_TIM_Base_MspInit+0x44>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	201c      	movs	r0, #28
 8000f70:	f000 f9a1 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f74:	201c      	movs	r0, #28
 8000f76:	f000 f9ba 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fce:	f000 f87f 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <TIM2_IRQHandler+0x10>)
 8000fde:	f000 ffdf 	bl	8001fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000100 	.word	0x20000100

08000fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800101e:	f7ff ffe5 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001022:	f001 fb1b 	bl	800265c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001026:	f7ff fdcf 	bl	8000bc8 <main>
  bx lr
 800102a:	4770      	bx	lr
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001034:	08003660 	.word	0x08003660
  ldr r2, =_sbss
 8001038:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800103c:	2000014c 	.word	0x2000014c

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x28>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f923 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	200f      	movs	r0, #15
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff ff3c 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f93b 	bl	800130a <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f903 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x1c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x20>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_IncTick+0x20>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000148 	.word	0x20000148

080010f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <HAL_GetTick+0x10>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	20000148 	.word	0x20000148

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4906      	ldr	r1, [pc, #24]	; (80011a0 <__NVIC_EnableIRQ+0x34>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff90 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff2d 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff42 	bl	8001150 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff90 	bl	80011f8 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5f 	bl	80011a4 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff35 	bl	800116c <__NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffa2 	bl	800125c <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b08b      	sub	sp, #44	; 0x2c
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	e169      	b.n	800160c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001338:	2201      	movs	r2, #1
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	429a      	cmp	r2, r3
 8001352:	f040 8158 	bne.w	8001606 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4a9a      	ldr	r2, [pc, #616]	; (80015c4 <HAL_GPIO_Init+0x2a0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d05e      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001360:	4a98      	ldr	r2, [pc, #608]	; (80015c4 <HAL_GPIO_Init+0x2a0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d875      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 8001366:	4a98      	ldr	r2, [pc, #608]	; (80015c8 <HAL_GPIO_Init+0x2a4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d058      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 800136c:	4a96      	ldr	r2, [pc, #600]	; (80015c8 <HAL_GPIO_Init+0x2a4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d86f      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 8001372:	4a96      	ldr	r2, [pc, #600]	; (80015cc <HAL_GPIO_Init+0x2a8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d052      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001378:	4a94      	ldr	r2, [pc, #592]	; (80015cc <HAL_GPIO_Init+0x2a8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d869      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 800137e:	4a94      	ldr	r2, [pc, #592]	; (80015d0 <HAL_GPIO_Init+0x2ac>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d04c      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001384:	4a92      	ldr	r2, [pc, #584]	; (80015d0 <HAL_GPIO_Init+0x2ac>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d863      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 800138a:	4a92      	ldr	r2, [pc, #584]	; (80015d4 <HAL_GPIO_Init+0x2b0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d046      	beq.n	800141e <HAL_GPIO_Init+0xfa>
 8001390:	4a90      	ldr	r2, [pc, #576]	; (80015d4 <HAL_GPIO_Init+0x2b0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d85d      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 8001396:	2b12      	cmp	r3, #18
 8001398:	d82a      	bhi.n	80013f0 <HAL_GPIO_Init+0xcc>
 800139a:	2b12      	cmp	r3, #18
 800139c:	d859      	bhi.n	8001452 <HAL_GPIO_Init+0x12e>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <HAL_GPIO_Init+0x80>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	0800141f 	.word	0x0800141f
 80013a8:	080013f9 	.word	0x080013f9
 80013ac:	0800140b 	.word	0x0800140b
 80013b0:	0800144d 	.word	0x0800144d
 80013b4:	08001453 	.word	0x08001453
 80013b8:	08001453 	.word	0x08001453
 80013bc:	08001453 	.word	0x08001453
 80013c0:	08001453 	.word	0x08001453
 80013c4:	08001453 	.word	0x08001453
 80013c8:	08001453 	.word	0x08001453
 80013cc:	08001453 	.word	0x08001453
 80013d0:	08001453 	.word	0x08001453
 80013d4:	08001453 	.word	0x08001453
 80013d8:	08001453 	.word	0x08001453
 80013dc:	08001453 	.word	0x08001453
 80013e0:	08001453 	.word	0x08001453
 80013e4:	08001453 	.word	0x08001453
 80013e8:	08001401 	.word	0x08001401
 80013ec:	08001415 	.word	0x08001415
 80013f0:	4a79      	ldr	r2, [pc, #484]	; (80015d8 <HAL_GPIO_Init+0x2b4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013f6:	e02c      	b.n	8001452 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	623b      	str	r3, [r7, #32]
          break;
 80013fe:	e029      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	3304      	adds	r3, #4
 8001406:	623b      	str	r3, [r7, #32]
          break;
 8001408:	e024      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	3308      	adds	r3, #8
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e01f      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	330c      	adds	r3, #12
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e01a      	b.n	8001454 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001426:	2304      	movs	r3, #4
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e013      	b.n	8001454 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	611a      	str	r2, [r3, #16]
          break;
 800143e:	e009      	b.n	8001454 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001440:	2308      	movs	r3, #8
 8001442:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	615a      	str	r2, [r3, #20]
          break;
 800144a:	e003      	b.n	8001454 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x130>
          break;
 8001452:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2bff      	cmp	r3, #255	; 0xff
 8001458:	d801      	bhi.n	800145e <HAL_GPIO_Init+0x13a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	e001      	b.n	8001462 <HAL_GPIO_Init+0x13e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3304      	adds	r3, #4
 8001462:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2bff      	cmp	r3, #255	; 0xff
 8001468:	d802      	bhi.n	8001470 <HAL_GPIO_Init+0x14c>
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x152>
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	3b08      	subs	r3, #8
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	210f      	movs	r1, #15
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	401a      	ands	r2, r3
 8001488:	6a39      	ldr	r1, [r7, #32]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	431a      	orrs	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 80b1 	beq.w	8001606 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a4:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <HAL_GPIO_Init+0x2b8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_GPIO_Init+0x2b8>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_GPIO_Init+0x2b8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014bc:	4a48      	ldr	r2, [pc, #288]	; (80015e0 <HAL_GPIO_Init+0x2bc>)
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a40      	ldr	r2, [pc, #256]	; (80015e4 <HAL_GPIO_Init+0x2c0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d013      	beq.n	8001510 <HAL_GPIO_Init+0x1ec>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a3f      	ldr	r2, [pc, #252]	; (80015e8 <HAL_GPIO_Init+0x2c4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00d      	beq.n	800150c <HAL_GPIO_Init+0x1e8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a3e      	ldr	r2, [pc, #248]	; (80015ec <HAL_GPIO_Init+0x2c8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d007      	beq.n	8001508 <HAL_GPIO_Init+0x1e4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3d      	ldr	r2, [pc, #244]	; (80015f0 <HAL_GPIO_Init+0x2cc>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_GPIO_Init+0x1e0>
 8001500:	2303      	movs	r3, #3
 8001502:	e006      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001504:	2304      	movs	r3, #4
 8001506:	e004      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001508:	2302      	movs	r3, #2
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_GPIO_Init+0x1ee>
 8001510:	2300      	movs	r3, #0
 8001512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001514:	f002 0203 	and.w	r2, r2, #3
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	4093      	lsls	r3, r2
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001522:	492f      	ldr	r1, [pc, #188]	; (80015e0 <HAL_GPIO_Init+0x2bc>)
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	492c      	ldr	r1, [pc, #176]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	43db      	mvns	r3, r3
 8001552:	4928      	ldr	r1, [pc, #160]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001554:	4013      	ands	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4922      	ldr	r1, [pc, #136]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	43db      	mvns	r3, r3
 800157a:	491e      	ldr	r1, [pc, #120]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800157c:	4013      	ands	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	4918      	ldr	r1, [pc, #96]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	608b      	str	r3, [r1, #8]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4914      	ldr	r1, [pc, #80]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d021      	beq.n	80015f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <HAL_GPIO_Init+0x2d0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	60cb      	str	r3, [r1, #12]
 80015c0:	e021      	b.n	8001606 <HAL_GPIO_Init+0x2e2>
 80015c2:	bf00      	nop
 80015c4:	10320000 	.word	0x10320000
 80015c8:	10310000 	.word	0x10310000
 80015cc:	10220000 	.word	0x10220000
 80015d0:	10210000 	.word	0x10210000
 80015d4:	10120000 	.word	0x10120000
 80015d8:	10110000 	.word	0x10110000
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010000 	.word	0x40010000
 80015e4:	40010800 	.word	0x40010800
 80015e8:	40010c00 	.word	0x40010c00
 80015ec:	40011000 	.word	0x40011000
 80015f0:	40011400 	.word	0x40011400
 80015f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	43db      	mvns	r3, r3
 8001600:	4909      	ldr	r1, [pc, #36]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001602:	4013      	ands	r3, r2
 8001604:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	3301      	adds	r3, #1
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f ae8e 	bne.w	8001338 <HAL_GPIO_Init+0x14>
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	372c      	adds	r7, #44	; 0x2c
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40010400 	.word	0x40010400

0800162c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e001      	b.n	800164e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]
 8001666:	4613      	mov	r3, r2
 8001668:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800166a:	787b      	ldrb	r3, [r7, #1]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001670:	887a      	ldrh	r2, [r7, #2]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001676:	e003      	b.n	8001680 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	041a      	lsls	r2, r3, #16
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	611a      	str	r2, [r3, #16]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
	...

0800168c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e26c      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8087 	beq.w	80017ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ac:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d00c      	beq.n	80016d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b8:	4b8f      	ldr	r3, [pc, #572]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d112      	bne.n	80016ea <HAL_RCC_OscConfig+0x5e>
 80016c4:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d10b      	bne.n	80016ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d06c      	beq.n	80017b8 <HAL_RCC_OscConfig+0x12c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d168      	bne.n	80017b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e246      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x76>
 80016f4:	4b80      	ldr	r3, [pc, #512]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a7f      	ldr	r2, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e02e      	b.n	8001760 <HAL_RCC_OscConfig+0xd4>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x98>
 800170a:	4b7b      	ldr	r3, [pc, #492]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a7a      	ldr	r2, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a77      	ldr	r2, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e01d      	b.n	8001760 <HAL_RCC_OscConfig+0xd4>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0xbc>
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a71      	ldr	r2, [pc, #452]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a6e      	ldr	r2, [pc, #440]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0xd4>
 8001748:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800174e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a67      	ldr	r2, [pc, #412]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d013      	beq.n	8001790 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fcc4 	bl	80010f4 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fcc0 	bl	80010f4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1fa      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0xe4>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fcb0 	bl	80010f4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fcac 	bl	80010f4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1e6      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x10c>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d063      	beq.n	800188e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c6:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d11c      	bne.n	8001818 <HAL_RCC_OscConfig+0x18c>
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d116      	bne.n	8001818 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_RCC_OscConfig+0x176>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e1ba      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4939      	ldr	r1, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	e03a      	b.n	800188e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_RCC_OscConfig+0x270>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fc65 	bl	80010f4 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fc61 	bl	80010f4 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e19b      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4927      	ldr	r1, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	e015      	b.n	800188e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_RCC_OscConfig+0x270>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fc44 	bl	80010f4 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff fc40 	bl	80010f4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e17a      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d03a      	beq.n	8001910 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d019      	beq.n	80018d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a8:	f7ff fc24 	bl	80010f4 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff fc20 	bl	80010f4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e15a      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f000 faa6 	bl	8001e20 <RCC_Delay>
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff fc0a 	bl	80010f4 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e2:	e00f      	b.n	8001904 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff fc06 	bl	80010f4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d908      	bls.n	8001904 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e140      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	42420000 	.word	0x42420000
 8001900:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001904:	4b9e      	ldr	r3, [pc, #632]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1e9      	bne.n	80018e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a6 	beq.w	8001a6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001922:	4b97      	ldr	r3, [pc, #604]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10d      	bne.n	800194a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a93      	ldr	r2, [pc, #588]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b91      	ldr	r3, [pc, #580]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001946:	2301      	movs	r3, #1
 8001948:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194a:	4b8e      	ldr	r3, [pc, #568]	; (8001b84 <HAL_RCC_OscConfig+0x4f8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d118      	bne.n	8001988 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x4f8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a8a      	ldr	r2, [pc, #552]	; (8001b84 <HAL_RCC_OscConfig+0x4f8>)
 800195c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001962:	f7ff fbc7 	bl	80010f4 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196a:	f7ff fbc3 	bl	80010f4 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b64      	cmp	r3, #100	; 0x64
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0fd      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x4f8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x312>
 8001990:	4b7b      	ldr	r3, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4a7a      	ldr	r2, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6213      	str	r3, [r2, #32]
 800199c:	e02d      	b.n	80019fa <HAL_RCC_OscConfig+0x36e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x334>
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a75      	ldr	r2, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6213      	str	r3, [r2, #32]
 80019b2:	4b73      	ldr	r3, [pc, #460]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a72      	ldr	r2, [pc, #456]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	e01c      	b.n	80019fa <HAL_RCC_OscConfig+0x36e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x356>
 80019c8:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a6c      	ldr	r2, [pc, #432]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a69      	ldr	r2, [pc, #420]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	e00b      	b.n	80019fa <HAL_RCC_OscConfig+0x36e>
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a66      	ldr	r2, [pc, #408]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6213      	str	r3, [r2, #32]
 80019ee:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a63      	ldr	r2, [pc, #396]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d015      	beq.n	8001a2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fb77 	bl	80010f4 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fb73 	bl	80010f4 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0ab      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0ee      	beq.n	8001a0a <HAL_RCC_OscConfig+0x37e>
 8001a2c:	e014      	b.n	8001a58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fb61 	bl	80010f4 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fb5d 	bl	80010f4 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e095      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4c:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ee      	bne.n	8001a36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d105      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5e:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a47      	ldr	r2, [pc, #284]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8081 	beq.w	8001b76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d061      	beq.n	8001b44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d146      	bne.n	8001b16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_OscConfig+0x4fc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb31 	bl	80010f4 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb2d 	bl	80010f4 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e067      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abc:	d108      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	492d      	ldr	r1, [pc, #180]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a19      	ldr	r1, [r3, #32]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	4927      	ldr	r1, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x4fc>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb01 	bl	80010f4 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fafd 	bl	80010f4 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e037      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x46a>
 8001b14:	e02f      	b.n	8001b76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_RCC_OscConfig+0x4fc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff faea 	bl	80010f4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff fae6 	bl	80010f4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e020      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x498>
 8001b42:	e018      	b.n	8001b76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e013      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40007000 	.word	0x40007000
 8001b88:	42420060 	.word	0x42420060

08001b8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0d0      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d910      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 0207 	bic.w	r2, r3, #7
 8001bb6:	4965      	ldr	r1, [pc, #404]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0b8      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be8:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bf2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	494d      	ldr	r1, [pc, #308]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d040      	beq.n	8001cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d115      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07f      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e073      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e06b      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6a:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f023 0203 	bic.w	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4936      	ldr	r1, [pc, #216]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c7c:	f7ff fa3a 	bl	80010f4 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c84:	f7ff fa36 	bl	80010f4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e053      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 020c 	and.w	r2, r3, #12
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d1eb      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d210      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	4922      	ldr	r1, [pc, #136]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e032      	b.n	8001d42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4916      	ldr	r1, [pc, #88]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1a:	f000 f821 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490a      	ldr	r1, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1cc>)
 8001d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1d0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f998 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40022000 	.word	0x40022000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08003600 	.word	0x08003600
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b490      	push	{r4, r7}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d68:	1d3c      	adds	r4, r7, #4
 8001d6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d70:	f240 2301 	movw	r3, #513	; 0x201
 8001d74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x40>
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x46>
 8001d9e:	e02d      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da2:	623b      	str	r3, [r7, #32]
      break;
 8001da4:	e02d      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001db2:	4413      	add	r3, r2
 8001db4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001db8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d013      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0c5b      	lsrs	r3, r3, #17
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dde:	fb02 f203 	mul.w	r2, r2, r3
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dea:	e004      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	623b      	str	r3, [r7, #32]
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfe:	623b      	str	r3, [r7, #32]
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	6a3b      	ldr	r3, [r7, #32]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc90      	pop	{r4, r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	080035f0 	.word	0x080035f0
 8001e14:	40021000 	.word	0x40021000
 8001e18:	007a1200 	.word	0x007a1200
 8001e1c:	003d0900 	.word	0x003d0900

08001e20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <RCC_Delay+0x34>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <RCC_Delay+0x38>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0a5b      	lsrs	r3, r3, #9
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e3c:	bf00      	nop
  }
  while (Delay --);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1e5a      	subs	r2, r3, #1
 8001e42:	60fa      	str	r2, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f9      	bne.n	8001e3c <RCC_Delay+0x1c>
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20000000 	.word	0x20000000
 8001e58:	10624dd3 	.word	0x10624dd3

08001e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e041      	b.n	8001ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff f85c 	bl	8000f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f000 fa70 	bl	8002380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d001      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e03a      	b.n	8001f8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <HAL_TIM_Base_Start_IT+0x98>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00e      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x58>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3e:	d009      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x58>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x58>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <HAL_TIM_Base_Start_IT+0xa0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d111      	bne.n	8001f78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d010      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f76:	e007      	b.n	8001f88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40012c00 	.word	0x40012c00
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40000800 	.word	0x40000800

08001fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0202 	mvn.w	r2, #2
 8001fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f9b1 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f9a4 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f9b3 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0204 	mvn.w	r2, #4
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f987 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f97a 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f989 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b08      	cmp	r3, #8
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0208 	mvn.w	r2, #8
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2204      	movs	r2, #4
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f95d 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f950 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f95f 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0210 	mvn.w	r2, #16
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2208      	movs	r2, #8
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f933 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f926 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f935 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0201 	mvn.w	r2, #1
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fe4c 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b80      	cmp	r3, #128	; 0x80
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fa77 	bl	800263e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002168:	2b40      	cmp	r3, #64	; 0x40
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8f9 	bl	800236e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b20      	cmp	r3, #32
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b20      	cmp	r3, #32
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0220 	mvn.w	r2, #32
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fa42 	bl	800262c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_TIM_ConfigClockSource+0x18>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e0b3      	b.n	8002330 <HAL_TIM_ConfigClockSource+0x180>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002200:	d03e      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0xd0>
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	f200 8087 	bhi.w	8002318 <HAL_TIM_ConfigClockSource+0x168>
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220e:	f000 8085 	beq.w	800231c <HAL_TIM_ConfigClockSource+0x16c>
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002216:	d87f      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002218:	2b70      	cmp	r3, #112	; 0x70
 800221a:	d01a      	beq.n	8002252 <HAL_TIM_ConfigClockSource+0xa2>
 800221c:	2b70      	cmp	r3, #112	; 0x70
 800221e:	d87b      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002220:	2b60      	cmp	r3, #96	; 0x60
 8002222:	d050      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0x116>
 8002224:	2b60      	cmp	r3, #96	; 0x60
 8002226:	d877      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002228:	2b50      	cmp	r3, #80	; 0x50
 800222a:	d03c      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0xf6>
 800222c:	2b50      	cmp	r3, #80	; 0x50
 800222e:	d873      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d058      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0x136>
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d86f      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002238:	2b30      	cmp	r3, #48	; 0x30
 800223a:	d064      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x156>
 800223c:	2b30      	cmp	r3, #48	; 0x30
 800223e:	d86b      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002240:	2b20      	cmp	r3, #32
 8002242:	d060      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x156>
 8002244:	2b20      	cmp	r3, #32
 8002246:	d867      	bhi.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d05c      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x156>
 800224c:	2b10      	cmp	r3, #16
 800224e:	d05a      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002250:	e062      	b.n	8002318 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6899      	ldr	r1, [r3, #8]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f000 f966 	bl	8002532 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002274:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	609a      	str	r2, [r3, #8]
      break;
 800227e:	e04e      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f000 f94f 	bl	8002532 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a2:	609a      	str	r2, [r3, #8]
      break;
 80022a4:	e03b      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f000 f8c6 	bl	8002444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2150      	movs	r1, #80	; 0x50
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f91d 	bl	80024fe <TIM_ITRx_SetConfig>
      break;
 80022c4:	e02b      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f000 f8e4 	bl	80024a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2160      	movs	r1, #96	; 0x60
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f90d 	bl	80024fe <TIM_ITRx_SetConfig>
      break;
 80022e4:	e01b      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6859      	ldr	r1, [r3, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f000 f8a6 	bl	8002444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2140      	movs	r1, #64	; 0x40
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f8fd 	bl	80024fe <TIM_ITRx_SetConfig>
      break;
 8002304:	e00b      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f000 f8f4 	bl	80024fe <TIM_ITRx_SetConfig>
        break;
 8002316:	e002      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800231c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a29      	ldr	r2, [pc, #164]	; (8002438 <TIM_Base_SetConfig+0xb8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00b      	beq.n	80023b0 <TIM_Base_SetConfig+0x30>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239e:	d007      	beq.n	80023b0 <TIM_Base_SetConfig+0x30>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <TIM_Base_SetConfig+0xbc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d003      	beq.n	80023b0 <TIM_Base_SetConfig+0x30>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <TIM_Base_SetConfig+0xc0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d108      	bne.n	80023c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <TIM_Base_SetConfig+0xb8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00b      	beq.n	80023e2 <TIM_Base_SetConfig+0x62>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d0:	d007      	beq.n	80023e2 <TIM_Base_SetConfig+0x62>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a19      	ldr	r2, [pc, #100]	; (800243c <TIM_Base_SetConfig+0xbc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0x62>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a18      	ldr	r2, [pc, #96]	; (8002440 <TIM_Base_SetConfig+0xc0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d108      	bne.n	80023f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <TIM_Base_SetConfig+0xb8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40000400 	.word	0x40000400
 8002440:	40000800 	.word	0x40000800

08002444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	f023 0201 	bic.w	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800246e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f023 030a 	bic.w	r3, r3, #10
 8002480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	621a      	str	r2, [r3, #32]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f023 0210 	bic.w	r2, r3, #16
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	031b      	lsls	r3, r3, #12
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	621a      	str	r2, [r3, #32]
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002514:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	f043 0307 	orr.w	r3, r3, #7
 8002520:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002532:	b480      	push	{r7}
 8002534:	b087      	sub	sp, #28
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800254c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	021a      	lsls	r2, r3, #8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	431a      	orrs	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4313      	orrs	r3, r2
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	609a      	str	r2, [r3, #8]
}
 8002566:	bf00      	nop
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002584:	2302      	movs	r3, #2
 8002586:	e046      	b.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00e      	beq.n	80025ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d009      	beq.n	80025ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d004      	beq.n	80025ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a10      	ldr	r2, [pc, #64]	; (8002628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10c      	bne.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800

0800262c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <__errno>:
 8002650:	4b01      	ldr	r3, [pc, #4]	; (8002658 <__errno+0x8>)
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	2000000c 	.word	0x2000000c

0800265c <__libc_init_array>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	2600      	movs	r6, #0
 8002660:	4d0c      	ldr	r5, [pc, #48]	; (8002694 <__libc_init_array+0x38>)
 8002662:	4c0d      	ldr	r4, [pc, #52]	; (8002698 <__libc_init_array+0x3c>)
 8002664:	1b64      	subs	r4, r4, r5
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	42a6      	cmp	r6, r4
 800266a:	d109      	bne.n	8002680 <__libc_init_array+0x24>
 800266c:	f000 ffb2 	bl	80035d4 <_init>
 8002670:	2600      	movs	r6, #0
 8002672:	4d0a      	ldr	r5, [pc, #40]	; (800269c <__libc_init_array+0x40>)
 8002674:	4c0a      	ldr	r4, [pc, #40]	; (80026a0 <__libc_init_array+0x44>)
 8002676:	1b64      	subs	r4, r4, r5
 8002678:	10a4      	asrs	r4, r4, #2
 800267a:	42a6      	cmp	r6, r4
 800267c:	d105      	bne.n	800268a <__libc_init_array+0x2e>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	f855 3b04 	ldr.w	r3, [r5], #4
 8002684:	4798      	blx	r3
 8002686:	3601      	adds	r6, #1
 8002688:	e7ee      	b.n	8002668 <__libc_init_array+0xc>
 800268a:	f855 3b04 	ldr.w	r3, [r5], #4
 800268e:	4798      	blx	r3
 8002690:	3601      	adds	r6, #1
 8002692:	e7f2      	b.n	800267a <__libc_init_array+0x1e>
 8002694:	08003658 	.word	0x08003658
 8002698:	08003658 	.word	0x08003658
 800269c:	08003658 	.word	0x08003658
 80026a0:	0800365c 	.word	0x0800365c

080026a4 <memset>:
 80026a4:	4603      	mov	r3, r0
 80026a6:	4402      	add	r2, r0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d100      	bne.n	80026ae <memset+0xa>
 80026ac:	4770      	bx	lr
 80026ae:	f803 1b01 	strb.w	r1, [r3], #1
 80026b2:	e7f9      	b.n	80026a8 <memset+0x4>

080026b4 <pow>:
 80026b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026b8:	461f      	mov	r7, r3
 80026ba:	4680      	mov	r8, r0
 80026bc:	4689      	mov	r9, r1
 80026be:	4616      	mov	r6, r2
 80026c0:	f000 f8a6 	bl	8002810 <__ieee754_pow>
 80026c4:	4b4d      	ldr	r3, [pc, #308]	; (80027fc <pow+0x148>)
 80026c6:	4604      	mov	r4, r0
 80026c8:	f993 3000 	ldrsb.w	r3, [r3]
 80026cc:	460d      	mov	r5, r1
 80026ce:	3301      	adds	r3, #1
 80026d0:	d015      	beq.n	80026fe <pow+0x4a>
 80026d2:	4632      	mov	r2, r6
 80026d4:	463b      	mov	r3, r7
 80026d6:	4630      	mov	r0, r6
 80026d8:	4639      	mov	r1, r7
 80026da:	f7fe f98f 	bl	80009fc <__aeabi_dcmpun>
 80026de:	b970      	cbnz	r0, 80026fe <pow+0x4a>
 80026e0:	4642      	mov	r2, r8
 80026e2:	464b      	mov	r3, r9
 80026e4:	4640      	mov	r0, r8
 80026e6:	4649      	mov	r1, r9
 80026e8:	f7fe f988 	bl	80009fc <__aeabi_dcmpun>
 80026ec:	2200      	movs	r2, #0
 80026ee:	2300      	movs	r3, #0
 80026f0:	b148      	cbz	r0, 8002706 <pow+0x52>
 80026f2:	4630      	mov	r0, r6
 80026f4:	4639      	mov	r1, r7
 80026f6:	f7fe f94f 	bl	8000998 <__aeabi_dcmpeq>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d17b      	bne.n	80027f6 <pow+0x142>
 80026fe:	4620      	mov	r0, r4
 8002700:	4629      	mov	r1, r5
 8002702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002706:	4640      	mov	r0, r8
 8002708:	4649      	mov	r1, r9
 800270a:	f7fe f945 	bl	8000998 <__aeabi_dcmpeq>
 800270e:	b1e0      	cbz	r0, 800274a <pow+0x96>
 8002710:	2200      	movs	r2, #0
 8002712:	2300      	movs	r3, #0
 8002714:	4630      	mov	r0, r6
 8002716:	4639      	mov	r1, r7
 8002718:	f7fe f93e 	bl	8000998 <__aeabi_dcmpeq>
 800271c:	2800      	cmp	r0, #0
 800271e:	d16a      	bne.n	80027f6 <pow+0x142>
 8002720:	4630      	mov	r0, r6
 8002722:	4639      	mov	r1, r7
 8002724:	f000 fe39 	bl	800339a <finite>
 8002728:	2800      	cmp	r0, #0
 800272a:	d0e8      	beq.n	80026fe <pow+0x4a>
 800272c:	2200      	movs	r2, #0
 800272e:	2300      	movs	r3, #0
 8002730:	4630      	mov	r0, r6
 8002732:	4639      	mov	r1, r7
 8002734:	f7fe f93a 	bl	80009ac <__aeabi_dcmplt>
 8002738:	2800      	cmp	r0, #0
 800273a:	d0e0      	beq.n	80026fe <pow+0x4a>
 800273c:	f7ff ff88 	bl	8002650 <__errno>
 8002740:	2321      	movs	r3, #33	; 0x21
 8002742:	2400      	movs	r4, #0
 8002744:	6003      	str	r3, [r0, #0]
 8002746:	4d2e      	ldr	r5, [pc, #184]	; (8002800 <pow+0x14c>)
 8002748:	e7d9      	b.n	80026fe <pow+0x4a>
 800274a:	4620      	mov	r0, r4
 800274c:	4629      	mov	r1, r5
 800274e:	f000 fe24 	bl	800339a <finite>
 8002752:	bba8      	cbnz	r0, 80027c0 <pow+0x10c>
 8002754:	4640      	mov	r0, r8
 8002756:	4649      	mov	r1, r9
 8002758:	f000 fe1f 	bl	800339a <finite>
 800275c:	b380      	cbz	r0, 80027c0 <pow+0x10c>
 800275e:	4630      	mov	r0, r6
 8002760:	4639      	mov	r1, r7
 8002762:	f000 fe1a 	bl	800339a <finite>
 8002766:	b358      	cbz	r0, 80027c0 <pow+0x10c>
 8002768:	4622      	mov	r2, r4
 800276a:	462b      	mov	r3, r5
 800276c:	4620      	mov	r0, r4
 800276e:	4629      	mov	r1, r5
 8002770:	f7fe f944 	bl	80009fc <__aeabi_dcmpun>
 8002774:	b160      	cbz	r0, 8002790 <pow+0xdc>
 8002776:	f7ff ff6b 	bl	8002650 <__errno>
 800277a:	2321      	movs	r3, #33	; 0x21
 800277c:	2200      	movs	r2, #0
 800277e:	6003      	str	r3, [r0, #0]
 8002780:	2300      	movs	r3, #0
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	f7fd ffc9 	bl	800071c <__aeabi_ddiv>
 800278a:	4604      	mov	r4, r0
 800278c:	460d      	mov	r5, r1
 800278e:	e7b6      	b.n	80026fe <pow+0x4a>
 8002790:	f7ff ff5e 	bl	8002650 <__errno>
 8002794:	2322      	movs	r3, #34	; 0x22
 8002796:	2200      	movs	r2, #0
 8002798:	6003      	str	r3, [r0, #0]
 800279a:	4649      	mov	r1, r9
 800279c:	2300      	movs	r3, #0
 800279e:	4640      	mov	r0, r8
 80027a0:	f7fe f904 	bl	80009ac <__aeabi_dcmplt>
 80027a4:	2400      	movs	r4, #0
 80027a6:	b148      	cbz	r0, 80027bc <pow+0x108>
 80027a8:	4630      	mov	r0, r6
 80027aa:	4639      	mov	r1, r7
 80027ac:	f000 fe02 	bl	80033b4 <rint>
 80027b0:	4632      	mov	r2, r6
 80027b2:	463b      	mov	r3, r7
 80027b4:	f7fe f8f0 	bl	8000998 <__aeabi_dcmpeq>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d0c4      	beq.n	8002746 <pow+0x92>
 80027bc:	4d11      	ldr	r5, [pc, #68]	; (8002804 <pow+0x150>)
 80027be:	e79e      	b.n	80026fe <pow+0x4a>
 80027c0:	2200      	movs	r2, #0
 80027c2:	2300      	movs	r3, #0
 80027c4:	4620      	mov	r0, r4
 80027c6:	4629      	mov	r1, r5
 80027c8:	f7fe f8e6 	bl	8000998 <__aeabi_dcmpeq>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d096      	beq.n	80026fe <pow+0x4a>
 80027d0:	4640      	mov	r0, r8
 80027d2:	4649      	mov	r1, r9
 80027d4:	f000 fde1 	bl	800339a <finite>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d090      	beq.n	80026fe <pow+0x4a>
 80027dc:	4630      	mov	r0, r6
 80027de:	4639      	mov	r1, r7
 80027e0:	f000 fddb 	bl	800339a <finite>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d08a      	beq.n	80026fe <pow+0x4a>
 80027e8:	f7ff ff32 	bl	8002650 <__errno>
 80027ec:	2322      	movs	r3, #34	; 0x22
 80027ee:	2400      	movs	r4, #0
 80027f0:	2500      	movs	r5, #0
 80027f2:	6003      	str	r3, [r0, #0]
 80027f4:	e783      	b.n	80026fe <pow+0x4a>
 80027f6:	2400      	movs	r4, #0
 80027f8:	4d03      	ldr	r5, [pc, #12]	; (8002808 <pow+0x154>)
 80027fa:	e780      	b.n	80026fe <pow+0x4a>
 80027fc:	20000070 	.word	0x20000070
 8002800:	fff00000 	.word	0xfff00000
 8002804:	7ff00000 	.word	0x7ff00000
 8002808:	3ff00000 	.word	0x3ff00000
 800280c:	00000000 	.word	0x00000000

08002810 <__ieee754_pow>:
 8002810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002814:	b093      	sub	sp, #76	; 0x4c
 8002816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800281a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800281e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8002822:	ea55 0302 	orrs.w	r3, r5, r2
 8002826:	4607      	mov	r7, r0
 8002828:	4688      	mov	r8, r1
 800282a:	f000 84bf 	beq.w	80031ac <__ieee754_pow+0x99c>
 800282e:	4b7e      	ldr	r3, [pc, #504]	; (8002a28 <__ieee754_pow+0x218>)
 8002830:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8002834:	429c      	cmp	r4, r3
 8002836:	4689      	mov	r9, r1
 8002838:	4682      	mov	sl, r0
 800283a:	dc09      	bgt.n	8002850 <__ieee754_pow+0x40>
 800283c:	d103      	bne.n	8002846 <__ieee754_pow+0x36>
 800283e:	b978      	cbnz	r0, 8002860 <__ieee754_pow+0x50>
 8002840:	42a5      	cmp	r5, r4
 8002842:	dd02      	ble.n	800284a <__ieee754_pow+0x3a>
 8002844:	e00c      	b.n	8002860 <__ieee754_pow+0x50>
 8002846:	429d      	cmp	r5, r3
 8002848:	dc02      	bgt.n	8002850 <__ieee754_pow+0x40>
 800284a:	429d      	cmp	r5, r3
 800284c:	d10e      	bne.n	800286c <__ieee754_pow+0x5c>
 800284e:	b16a      	cbz	r2, 800286c <__ieee754_pow+0x5c>
 8002850:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002854:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002858:	ea54 030a 	orrs.w	r3, r4, sl
 800285c:	f000 84a6 	beq.w	80031ac <__ieee754_pow+0x99c>
 8002860:	4872      	ldr	r0, [pc, #456]	; (8002a2c <__ieee754_pow+0x21c>)
 8002862:	b013      	add	sp, #76	; 0x4c
 8002864:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002868:	f000 bd9e 	b.w	80033a8 <nan>
 800286c:	f1b9 0f00 	cmp.w	r9, #0
 8002870:	da39      	bge.n	80028e6 <__ieee754_pow+0xd6>
 8002872:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <__ieee754_pow+0x220>)
 8002874:	429d      	cmp	r5, r3
 8002876:	dc54      	bgt.n	8002922 <__ieee754_pow+0x112>
 8002878:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800287c:	429d      	cmp	r5, r3
 800287e:	f340 84a6 	ble.w	80031ce <__ieee754_pow+0x9be>
 8002882:	152b      	asrs	r3, r5, #20
 8002884:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002888:	2b14      	cmp	r3, #20
 800288a:	dd0f      	ble.n	80028ac <__ieee754_pow+0x9c>
 800288c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002890:	fa22 f103 	lsr.w	r1, r2, r3
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	4293      	cmp	r3, r2
 800289a:	f040 8498 	bne.w	80031ce <__ieee754_pow+0x9be>
 800289e:	f001 0101 	and.w	r1, r1, #1
 80028a2:	f1c1 0302 	rsb	r3, r1, #2
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	b182      	cbz	r2, 80028cc <__ieee754_pow+0xbc>
 80028aa:	e05e      	b.n	800296a <__ieee754_pow+0x15a>
 80028ac:	2a00      	cmp	r2, #0
 80028ae:	d15a      	bne.n	8002966 <__ieee754_pow+0x156>
 80028b0:	f1c3 0314 	rsb	r3, r3, #20
 80028b4:	fa45 f103 	asr.w	r1, r5, r3
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	42ab      	cmp	r3, r5
 80028be:	f040 8483 	bne.w	80031c8 <__ieee754_pow+0x9b8>
 80028c2:	f001 0101 	and.w	r1, r1, #1
 80028c6:	f1c1 0302 	rsb	r3, r1, #2
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4b59      	ldr	r3, [pc, #356]	; (8002a34 <__ieee754_pow+0x224>)
 80028ce:	429d      	cmp	r5, r3
 80028d0:	d130      	bne.n	8002934 <__ieee754_pow+0x124>
 80028d2:	2e00      	cmp	r6, #0
 80028d4:	f280 8474 	bge.w	80031c0 <__ieee754_pow+0x9b0>
 80028d8:	463a      	mov	r2, r7
 80028da:	4643      	mov	r3, r8
 80028dc:	2000      	movs	r0, #0
 80028de:	4955      	ldr	r1, [pc, #340]	; (8002a34 <__ieee754_pow+0x224>)
 80028e0:	f7fd ff1c 	bl	800071c <__aeabi_ddiv>
 80028e4:	e02f      	b.n	8002946 <__ieee754_pow+0x136>
 80028e6:	2300      	movs	r3, #0
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2a00      	cmp	r2, #0
 80028ec:	d13d      	bne.n	800296a <__ieee754_pow+0x15a>
 80028ee:	4b4e      	ldr	r3, [pc, #312]	; (8002a28 <__ieee754_pow+0x218>)
 80028f0:	429d      	cmp	r5, r3
 80028f2:	d1eb      	bne.n	80028cc <__ieee754_pow+0xbc>
 80028f4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80028f8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80028fc:	ea53 030a 	orrs.w	r3, r3, sl
 8002900:	f000 8454 	beq.w	80031ac <__ieee754_pow+0x99c>
 8002904:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <__ieee754_pow+0x228>)
 8002906:	429c      	cmp	r4, r3
 8002908:	dd0d      	ble.n	8002926 <__ieee754_pow+0x116>
 800290a:	2e00      	cmp	r6, #0
 800290c:	f280 8454 	bge.w	80031b8 <__ieee754_pow+0x9a8>
 8002910:	f04f 0b00 	mov.w	fp, #0
 8002914:	f04f 0c00 	mov.w	ip, #0
 8002918:	4658      	mov	r0, fp
 800291a:	4661      	mov	r1, ip
 800291c:	b013      	add	sp, #76	; 0x4c
 800291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002922:	2302      	movs	r3, #2
 8002924:	e7e0      	b.n	80028e8 <__ieee754_pow+0xd8>
 8002926:	2e00      	cmp	r6, #0
 8002928:	daf2      	bge.n	8002910 <__ieee754_pow+0x100>
 800292a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800292e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002932:	e7f1      	b.n	8002918 <__ieee754_pow+0x108>
 8002934:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8002938:	d108      	bne.n	800294c <__ieee754_pow+0x13c>
 800293a:	463a      	mov	r2, r7
 800293c:	4643      	mov	r3, r8
 800293e:	4638      	mov	r0, r7
 8002940:	4641      	mov	r1, r8
 8002942:	f7fd fdc1 	bl	80004c8 <__aeabi_dmul>
 8002946:	4683      	mov	fp, r0
 8002948:	468c      	mov	ip, r1
 800294a:	e7e5      	b.n	8002918 <__ieee754_pow+0x108>
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <__ieee754_pow+0x22c>)
 800294e:	429e      	cmp	r6, r3
 8002950:	d10b      	bne.n	800296a <__ieee754_pow+0x15a>
 8002952:	f1b9 0f00 	cmp.w	r9, #0
 8002956:	db08      	blt.n	800296a <__ieee754_pow+0x15a>
 8002958:	4638      	mov	r0, r7
 800295a:	4641      	mov	r1, r8
 800295c:	b013      	add	sp, #76	; 0x4c
 800295e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002962:	f000 bc6b 	b.w	800323c <__ieee754_sqrt>
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	4638      	mov	r0, r7
 800296c:	4641      	mov	r1, r8
 800296e:	f000 fd11 	bl	8003394 <fabs>
 8002972:	4683      	mov	fp, r0
 8002974:	468c      	mov	ip, r1
 8002976:	f1ba 0f00 	cmp.w	sl, #0
 800297a:	d129      	bne.n	80029d0 <__ieee754_pow+0x1c0>
 800297c:	b124      	cbz	r4, 8002988 <__ieee754_pow+0x178>
 800297e:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <__ieee754_pow+0x224>)
 8002980:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8002984:	429a      	cmp	r2, r3
 8002986:	d123      	bne.n	80029d0 <__ieee754_pow+0x1c0>
 8002988:	2e00      	cmp	r6, #0
 800298a:	da07      	bge.n	800299c <__ieee754_pow+0x18c>
 800298c:	465a      	mov	r2, fp
 800298e:	4663      	mov	r3, ip
 8002990:	2000      	movs	r0, #0
 8002992:	4928      	ldr	r1, [pc, #160]	; (8002a34 <__ieee754_pow+0x224>)
 8002994:	f7fd fec2 	bl	800071c <__aeabi_ddiv>
 8002998:	4683      	mov	fp, r0
 800299a:	468c      	mov	ip, r1
 800299c:	f1b9 0f00 	cmp.w	r9, #0
 80029a0:	daba      	bge.n	8002918 <__ieee754_pow+0x108>
 80029a2:	9b00      	ldr	r3, [sp, #0]
 80029a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80029a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80029ac:	4323      	orrs	r3, r4
 80029ae:	d108      	bne.n	80029c2 <__ieee754_pow+0x1b2>
 80029b0:	465a      	mov	r2, fp
 80029b2:	4663      	mov	r3, ip
 80029b4:	4658      	mov	r0, fp
 80029b6:	4661      	mov	r1, ip
 80029b8:	f7fd fbce 	bl	8000158 <__aeabi_dsub>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	e78e      	b.n	80028e0 <__ieee754_pow+0xd0>
 80029c2:	9b00      	ldr	r3, [sp, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d1a7      	bne.n	8002918 <__ieee754_pow+0x108>
 80029c8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80029cc:	469c      	mov	ip, r3
 80029ce:	e7a3      	b.n	8002918 <__ieee754_pow+0x108>
 80029d0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80029d4:	3b01      	subs	r3, #1
 80029d6:	930c      	str	r3, [sp, #48]	; 0x30
 80029d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80029da:	9b00      	ldr	r3, [sp, #0]
 80029dc:	4313      	orrs	r3, r2
 80029de:	d104      	bne.n	80029ea <__ieee754_pow+0x1da>
 80029e0:	463a      	mov	r2, r7
 80029e2:	4643      	mov	r3, r8
 80029e4:	4638      	mov	r0, r7
 80029e6:	4641      	mov	r1, r8
 80029e8:	e7e6      	b.n	80029b8 <__ieee754_pow+0x1a8>
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <__ieee754_pow+0x230>)
 80029ec:	429d      	cmp	r5, r3
 80029ee:	f340 80f9 	ble.w	8002be4 <__ieee754_pow+0x3d4>
 80029f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80029f6:	429d      	cmp	r5, r3
 80029f8:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <__ieee754_pow+0x228>)
 80029fa:	dd09      	ble.n	8002a10 <__ieee754_pow+0x200>
 80029fc:	429c      	cmp	r4, r3
 80029fe:	dc0c      	bgt.n	8002a1a <__ieee754_pow+0x20a>
 8002a00:	2e00      	cmp	r6, #0
 8002a02:	da85      	bge.n	8002910 <__ieee754_pow+0x100>
 8002a04:	a306      	add	r3, pc, #24	; (adr r3, 8002a20 <__ieee754_pow+0x210>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	e798      	b.n	8002942 <__ieee754_pow+0x132>
 8002a10:	429c      	cmp	r4, r3
 8002a12:	dbf5      	blt.n	8002a00 <__ieee754_pow+0x1f0>
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <__ieee754_pow+0x224>)
 8002a16:	429c      	cmp	r4, r3
 8002a18:	dd14      	ble.n	8002a44 <__ieee754_pow+0x234>
 8002a1a:	2e00      	cmp	r6, #0
 8002a1c:	dcf2      	bgt.n	8002a04 <__ieee754_pow+0x1f4>
 8002a1e:	e777      	b.n	8002910 <__ieee754_pow+0x100>
 8002a20:	8800759c 	.word	0x8800759c
 8002a24:	7e37e43c 	.word	0x7e37e43c
 8002a28:	7ff00000 	.word	0x7ff00000
 8002a2c:	08003610 	.word	0x08003610
 8002a30:	433fffff 	.word	0x433fffff
 8002a34:	3ff00000 	.word	0x3ff00000
 8002a38:	3fefffff 	.word	0x3fefffff
 8002a3c:	3fe00000 	.word	0x3fe00000
 8002a40:	41e00000 	.word	0x41e00000
 8002a44:	4661      	mov	r1, ip
 8002a46:	2200      	movs	r2, #0
 8002a48:	4658      	mov	r0, fp
 8002a4a:	4b61      	ldr	r3, [pc, #388]	; (8002bd0 <__ieee754_pow+0x3c0>)
 8002a4c:	f7fd fb84 	bl	8000158 <__aeabi_dsub>
 8002a50:	a355      	add	r3, pc, #340	; (adr r3, 8002ba8 <__ieee754_pow+0x398>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	4604      	mov	r4, r0
 8002a58:	460d      	mov	r5, r1
 8002a5a:	f7fd fd35 	bl	80004c8 <__aeabi_dmul>
 8002a5e:	a354      	add	r3, pc, #336	; (adr r3, 8002bb0 <__ieee754_pow+0x3a0>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	4606      	mov	r6, r0
 8002a66:	460f      	mov	r7, r1
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	f7fd fd2c 	bl	80004c8 <__aeabi_dmul>
 8002a70:	2200      	movs	r2, #0
 8002a72:	4682      	mov	sl, r0
 8002a74:	468b      	mov	fp, r1
 8002a76:	4620      	mov	r0, r4
 8002a78:	4629      	mov	r1, r5
 8002a7a:	4b56      	ldr	r3, [pc, #344]	; (8002bd4 <__ieee754_pow+0x3c4>)
 8002a7c:	f7fd fd24 	bl	80004c8 <__aeabi_dmul>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	a14c      	add	r1, pc, #304	; (adr r1, 8002bb8 <__ieee754_pow+0x3a8>)
 8002a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a8a:	f7fd fb65 	bl	8000158 <__aeabi_dsub>
 8002a8e:	4622      	mov	r2, r4
 8002a90:	462b      	mov	r3, r5
 8002a92:	f7fd fd19 	bl	80004c8 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	494e      	ldr	r1, [pc, #312]	; (8002bd8 <__ieee754_pow+0x3c8>)
 8002a9e:	f7fd fb5b 	bl	8000158 <__aeabi_dsub>
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	4680      	mov	r8, r0
 8002aa8:	4689      	mov	r9, r1
 8002aaa:	4620      	mov	r0, r4
 8002aac:	4629      	mov	r1, r5
 8002aae:	f7fd fd0b 	bl	80004c8 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	4649      	mov	r1, r9
 8002aba:	f7fd fd05 	bl	80004c8 <__aeabi_dmul>
 8002abe:	a340      	add	r3, pc, #256	; (adr r3, 8002bc0 <__ieee754_pow+0x3b0>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fd00 	bl	80004c8 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4650      	mov	r0, sl
 8002ace:	4659      	mov	r1, fp
 8002ad0:	f7fd fb42 	bl	8000158 <__aeabi_dsub>
 8002ad4:	f04f 0a00 	mov.w	sl, #0
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4604      	mov	r4, r0
 8002ade:	460d      	mov	r5, r1
 8002ae0:	4630      	mov	r0, r6
 8002ae2:	4639      	mov	r1, r7
 8002ae4:	f7fd fb3a 	bl	800015c <__adddf3>
 8002ae8:	4632      	mov	r2, r6
 8002aea:	463b      	mov	r3, r7
 8002aec:	4650      	mov	r0, sl
 8002aee:	468b      	mov	fp, r1
 8002af0:	f7fd fb32 	bl	8000158 <__aeabi_dsub>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fb2c 	bl	8000158 <__aeabi_dsub>
 8002b00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002b04:	9b00      	ldr	r3, [sp, #0]
 8002b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f04f 0600 	mov.w	r6, #0
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	bf0c      	ite	eq
 8002b16:	4b31      	ldreq	r3, [pc, #196]	; (8002bdc <__ieee754_pow+0x3cc>)
 8002b18:	4b2d      	ldrne	r3, [pc, #180]	; (8002bd0 <__ieee754_pow+0x3c0>)
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	460d      	mov	r5, r1
 8002b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b22:	e9cd 2300 	strd	r2, r3, [sp]
 8002b26:	4632      	mov	r2, r6
 8002b28:	463b      	mov	r3, r7
 8002b2a:	f7fd fb15 	bl	8000158 <__aeabi_dsub>
 8002b2e:	4652      	mov	r2, sl
 8002b30:	465b      	mov	r3, fp
 8002b32:	f7fd fcc9 	bl	80004c8 <__aeabi_dmul>
 8002b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b3a:	4680      	mov	r8, r0
 8002b3c:	4689      	mov	r9, r1
 8002b3e:	4620      	mov	r0, r4
 8002b40:	4629      	mov	r1, r5
 8002b42:	f7fd fcc1 	bl	80004c8 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	f7fd fb05 	bl	800015c <__adddf3>
 8002b52:	4632      	mov	r2, r6
 8002b54:	463b      	mov	r3, r7
 8002b56:	4680      	mov	r8, r0
 8002b58:	4689      	mov	r9, r1
 8002b5a:	4650      	mov	r0, sl
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	f7fd fcb3 	bl	80004c8 <__aeabi_dmul>
 8002b62:	4604      	mov	r4, r0
 8002b64:	460d      	mov	r5, r1
 8002b66:	460b      	mov	r3, r1
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	4640      	mov	r0, r8
 8002b6e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002b72:	f7fd faf3 	bl	800015c <__adddf3>
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <__ieee754_pow+0x3d0>)
 8002b78:	4682      	mov	sl, r0
 8002b7a:	4299      	cmp	r1, r3
 8002b7c:	460f      	mov	r7, r1
 8002b7e:	460e      	mov	r6, r1
 8002b80:	f340 82ed 	ble.w	800315e <__ieee754_pow+0x94e>
 8002b84:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002b88:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002b8c:	4303      	orrs	r3, r0
 8002b8e:	f000 81e7 	beq.w	8002f60 <__ieee754_pow+0x750>
 8002b92:	a30d      	add	r3, pc, #52	; (adr r3, 8002bc8 <__ieee754_pow+0x3b8>)
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b9c:	f7fd fc94 	bl	80004c8 <__aeabi_dmul>
 8002ba0:	a309      	add	r3, pc, #36	; (adr r3, 8002bc8 <__ieee754_pow+0x3b8>)
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	e6cc      	b.n	8002942 <__ieee754_pow+0x132>
 8002ba8:	60000000 	.word	0x60000000
 8002bac:	3ff71547 	.word	0x3ff71547
 8002bb0:	f85ddf44 	.word	0xf85ddf44
 8002bb4:	3e54ae0b 	.word	0x3e54ae0b
 8002bb8:	55555555 	.word	0x55555555
 8002bbc:	3fd55555 	.word	0x3fd55555
 8002bc0:	652b82fe 	.word	0x652b82fe
 8002bc4:	3ff71547 	.word	0x3ff71547
 8002bc8:	8800759c 	.word	0x8800759c
 8002bcc:	7e37e43c 	.word	0x7e37e43c
 8002bd0:	3ff00000 	.word	0x3ff00000
 8002bd4:	3fd00000 	.word	0x3fd00000
 8002bd8:	3fe00000 	.word	0x3fe00000
 8002bdc:	bff00000 	.word	0xbff00000
 8002be0:	408fffff 	.word	0x408fffff
 8002be4:	4bd4      	ldr	r3, [pc, #848]	; (8002f38 <__ieee754_pow+0x728>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	ea09 0303 	and.w	r3, r9, r3
 8002bec:	b943      	cbnz	r3, 8002c00 <__ieee754_pow+0x3f0>
 8002bee:	4658      	mov	r0, fp
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	4bd2      	ldr	r3, [pc, #840]	; (8002f3c <__ieee754_pow+0x72c>)
 8002bf4:	f7fd fc68 	bl	80004c8 <__aeabi_dmul>
 8002bf8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002bfc:	4683      	mov	fp, r0
 8002bfe:	460c      	mov	r4, r1
 8002c00:	1523      	asrs	r3, r4, #20
 8002c02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002c06:	4413      	add	r3, r2
 8002c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c0a:	4bcd      	ldr	r3, [pc, #820]	; (8002f40 <__ieee754_pow+0x730>)
 8002c0c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002c10:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002c14:	429c      	cmp	r4, r3
 8002c16:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002c1a:	dd08      	ble.n	8002c2e <__ieee754_pow+0x41e>
 8002c1c:	4bc9      	ldr	r3, [pc, #804]	; (8002f44 <__ieee754_pow+0x734>)
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	f340 819c 	ble.w	8002f5c <__ieee754_pow+0x74c>
 8002c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c2e:	2600      	movs	r6, #0
 8002c30:	00f3      	lsls	r3, r6, #3
 8002c32:	930d      	str	r3, [sp, #52]	; 0x34
 8002c34:	4bc4      	ldr	r3, [pc, #784]	; (8002f48 <__ieee754_pow+0x738>)
 8002c36:	4658      	mov	r0, fp
 8002c38:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002c3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c40:	4629      	mov	r1, r5
 8002c42:	461a      	mov	r2, r3
 8002c44:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002c48:	4623      	mov	r3, r4
 8002c4a:	f7fd fa85 	bl	8000158 <__aeabi_dsub>
 8002c4e:	46da      	mov	sl, fp
 8002c50:	462b      	mov	r3, r5
 8002c52:	4652      	mov	r2, sl
 8002c54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002c58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002c5c:	f7fd fa7e 	bl	800015c <__adddf3>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	2000      	movs	r0, #0
 8002c66:	49b9      	ldr	r1, [pc, #740]	; (8002f4c <__ieee754_pow+0x73c>)
 8002c68:	f7fd fd58 	bl	800071c <__aeabi_ddiv>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002c74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002c78:	f7fd fc26 	bl	80004c8 <__aeabi_dmul>
 8002c7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002c80:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002c84:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	46ab      	mov	fp, r5
 8002c8e:	106d      	asrs	r5, r5, #1
 8002c90:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002c94:	9304      	str	r3, [sp, #16]
 8002c96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002c9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002c9e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	461d      	mov	r5, r3
 8002caa:	f7fd fc0d 	bl	80004c8 <__aeabi_dmul>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002cb6:	f7fd fa4f 	bl	8000158 <__aeabi_dsub>
 8002cba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002cbe:	4606      	mov	r6, r0
 8002cc0:	460f      	mov	r7, r1
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	f7fd fa47 	bl	8000158 <__aeabi_dsub>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4650      	mov	r0, sl
 8002cd0:	4659      	mov	r1, fp
 8002cd2:	f7fd fa41 	bl	8000158 <__aeabi_dsub>
 8002cd6:	4642      	mov	r2, r8
 8002cd8:	464b      	mov	r3, r9
 8002cda:	f7fd fbf5 	bl	80004c8 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	f7fd fa37 	bl	8000158 <__aeabi_dsub>
 8002cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002cee:	f7fd fbeb 	bl	80004c8 <__aeabi_dmul>
 8002cf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002cf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7fd fbe3 	bl	80004c8 <__aeabi_dmul>
 8002d02:	a37b      	add	r3, pc, #492	; (adr r3, 8002ef0 <__ieee754_pow+0x6e0>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	4604      	mov	r4, r0
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	f7fd fbdc 	bl	80004c8 <__aeabi_dmul>
 8002d10:	a379      	add	r3, pc, #484	; (adr r3, 8002ef8 <__ieee754_pow+0x6e8>)
 8002d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d16:	f7fd fa21 	bl	800015c <__adddf3>
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	f7fd fbd3 	bl	80004c8 <__aeabi_dmul>
 8002d22:	a377      	add	r3, pc, #476	; (adr r3, 8002f00 <__ieee754_pow+0x6f0>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fa18 	bl	800015c <__adddf3>
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	462b      	mov	r3, r5
 8002d30:	f7fd fbca 	bl	80004c8 <__aeabi_dmul>
 8002d34:	a374      	add	r3, pc, #464	; (adr r3, 8002f08 <__ieee754_pow+0x6f8>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fa0f 	bl	800015c <__adddf3>
 8002d3e:	4622      	mov	r2, r4
 8002d40:	462b      	mov	r3, r5
 8002d42:	f7fd fbc1 	bl	80004c8 <__aeabi_dmul>
 8002d46:	a372      	add	r3, pc, #456	; (adr r3, 8002f10 <__ieee754_pow+0x700>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	f7fd fa06 	bl	800015c <__adddf3>
 8002d50:	4622      	mov	r2, r4
 8002d52:	462b      	mov	r3, r5
 8002d54:	f7fd fbb8 	bl	80004c8 <__aeabi_dmul>
 8002d58:	a36f      	add	r3, pc, #444	; (adr r3, 8002f18 <__ieee754_pow+0x708>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd f9fd 	bl	800015c <__adddf3>
 8002d62:	4622      	mov	r2, r4
 8002d64:	4606      	mov	r6, r0
 8002d66:	460f      	mov	r7, r1
 8002d68:	462b      	mov	r3, r5
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	f7fd fbab 	bl	80004c8 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4630      	mov	r0, r6
 8002d78:	4639      	mov	r1, r7
 8002d7a:	f7fd fba5 	bl	80004c8 <__aeabi_dmul>
 8002d7e:	4604      	mov	r4, r0
 8002d80:	460d      	mov	r5, r1
 8002d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d86:	4642      	mov	r2, r8
 8002d88:	464b      	mov	r3, r9
 8002d8a:	f7fd f9e7 	bl	800015c <__adddf3>
 8002d8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002d92:	f7fd fb99 	bl	80004c8 <__aeabi_dmul>
 8002d96:	4622      	mov	r2, r4
 8002d98:	462b      	mov	r3, r5
 8002d9a:	f7fd f9df 	bl	800015c <__adddf3>
 8002d9e:	4642      	mov	r2, r8
 8002da0:	4606      	mov	r6, r0
 8002da2:	460f      	mov	r7, r1
 8002da4:	464b      	mov	r3, r9
 8002da6:	4640      	mov	r0, r8
 8002da8:	4649      	mov	r1, r9
 8002daa:	f7fd fb8d 	bl	80004c8 <__aeabi_dmul>
 8002dae:	2200      	movs	r2, #0
 8002db0:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <__ieee754_pow+0x740>)
 8002db2:	4682      	mov	sl, r0
 8002db4:	468b      	mov	fp, r1
 8002db6:	f7fd f9d1 	bl	800015c <__adddf3>
 8002dba:	4632      	mov	r2, r6
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	f7fd f9cd 	bl	800015c <__adddf3>
 8002dc2:	9c04      	ldr	r4, [sp, #16]
 8002dc4:	460d      	mov	r5, r1
 8002dc6:	4622      	mov	r2, r4
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4640      	mov	r0, r8
 8002dcc:	4649      	mov	r1, r9
 8002dce:	f7fd fb7b 	bl	80004c8 <__aeabi_dmul>
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	4680      	mov	r8, r0
 8002dd6:	4689      	mov	r9, r1
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4629      	mov	r1, r5
 8002ddc:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <__ieee754_pow+0x740>)
 8002dde:	f7fd f9bb 	bl	8000158 <__aeabi_dsub>
 8002de2:	4652      	mov	r2, sl
 8002de4:	465b      	mov	r3, fp
 8002de6:	f7fd f9b7 	bl	8000158 <__aeabi_dsub>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4630      	mov	r0, r6
 8002df0:	4639      	mov	r1, r7
 8002df2:	f7fd f9b1 	bl	8000158 <__aeabi_dsub>
 8002df6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002dfa:	f7fd fb65 	bl	80004c8 <__aeabi_dmul>
 8002dfe:	4622      	mov	r2, r4
 8002e00:	4606      	mov	r6, r0
 8002e02:	460f      	mov	r7, r1
 8002e04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002e08:	462b      	mov	r3, r5
 8002e0a:	f7fd fb5d 	bl	80004c8 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4630      	mov	r0, r6
 8002e14:	4639      	mov	r1, r7
 8002e16:	f7fd f9a1 	bl	800015c <__adddf3>
 8002e1a:	4606      	mov	r6, r0
 8002e1c:	460f      	mov	r7, r1
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4640      	mov	r0, r8
 8002e24:	4649      	mov	r1, r9
 8002e26:	f7fd f999 	bl	800015c <__adddf3>
 8002e2a:	a33d      	add	r3, pc, #244	; (adr r3, 8002f20 <__ieee754_pow+0x710>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	9c04      	ldr	r4, [sp, #16]
 8002e32:	460d      	mov	r5, r1
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7fd fb47 	bl	80004c8 <__aeabi_dmul>
 8002e3a:	4642      	mov	r2, r8
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002e42:	4620      	mov	r0, r4
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7fd f987 	bl	8000158 <__aeabi_dsub>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4630      	mov	r0, r6
 8002e50:	4639      	mov	r1, r7
 8002e52:	f7fd f981 	bl	8000158 <__aeabi_dsub>
 8002e56:	a334      	add	r3, pc, #208	; (adr r3, 8002f28 <__ieee754_pow+0x718>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fb34 	bl	80004c8 <__aeabi_dmul>
 8002e60:	a333      	add	r3, pc, #204	; (adr r3, 8002f30 <__ieee754_pow+0x720>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	4606      	mov	r6, r0
 8002e68:	460f      	mov	r7, r1
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd fb2b 	bl	80004c8 <__aeabi_dmul>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4630      	mov	r0, r6
 8002e78:	4639      	mov	r1, r7
 8002e7a:	f7fd f96f 	bl	800015c <__adddf3>
 8002e7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e80:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <__ieee754_pow+0x744>)
 8002e82:	4413      	add	r3, r2
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f7fd f968 	bl	800015c <__adddf3>
 8002e8c:	4680      	mov	r8, r0
 8002e8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002e90:	4689      	mov	r9, r1
 8002e92:	f7fd faaf 	bl	80003f4 <__aeabi_i2d>
 8002e96:	4604      	mov	r4, r0
 8002e98:	460d      	mov	r5, r1
 8002e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <__ieee754_pow+0x748>)
 8002e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	f7fd f956 	bl	800015c <__adddf3>
 8002eb0:	4632      	mov	r2, r6
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	f7fd f952 	bl	800015c <__adddf3>
 8002eb8:	4622      	mov	r2, r4
 8002eba:	462b      	mov	r3, r5
 8002ebc:	f7fd f94e 	bl	800015c <__adddf3>
 8002ec0:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	462b      	mov	r3, r5
 8002ec8:	4650      	mov	r0, sl
 8002eca:	468b      	mov	fp, r1
 8002ecc:	f7fd f944 	bl	8000158 <__aeabi_dsub>
 8002ed0:	4632      	mov	r2, r6
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	f7fd f940 	bl	8000158 <__aeabi_dsub>
 8002ed8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002edc:	f7fd f93c 	bl	8000158 <__aeabi_dsub>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	e608      	b.n	8002afc <__ieee754_pow+0x2ec>
 8002eea:	bf00      	nop
 8002eec:	f3af 8000 	nop.w
 8002ef0:	4a454eef 	.word	0x4a454eef
 8002ef4:	3fca7e28 	.word	0x3fca7e28
 8002ef8:	93c9db65 	.word	0x93c9db65
 8002efc:	3fcd864a 	.word	0x3fcd864a
 8002f00:	a91d4101 	.word	0xa91d4101
 8002f04:	3fd17460 	.word	0x3fd17460
 8002f08:	518f264d 	.word	0x518f264d
 8002f0c:	3fd55555 	.word	0x3fd55555
 8002f10:	db6fabff 	.word	0xdb6fabff
 8002f14:	3fdb6db6 	.word	0x3fdb6db6
 8002f18:	33333303 	.word	0x33333303
 8002f1c:	3fe33333 	.word	0x3fe33333
 8002f20:	e0000000 	.word	0xe0000000
 8002f24:	3feec709 	.word	0x3feec709
 8002f28:	dc3a03fd 	.word	0xdc3a03fd
 8002f2c:	3feec709 	.word	0x3feec709
 8002f30:	145b01f5 	.word	0x145b01f5
 8002f34:	be3e2fe0 	.word	0xbe3e2fe0
 8002f38:	7ff00000 	.word	0x7ff00000
 8002f3c:	43400000 	.word	0x43400000
 8002f40:	0003988e 	.word	0x0003988e
 8002f44:	000bb679 	.word	0x000bb679
 8002f48:	08003618 	.word	0x08003618
 8002f4c:	3ff00000 	.word	0x3ff00000
 8002f50:	40080000 	.word	0x40080000
 8002f54:	08003638 	.word	0x08003638
 8002f58:	08003628 	.word	0x08003628
 8002f5c:	2601      	movs	r6, #1
 8002f5e:	e667      	b.n	8002c30 <__ieee754_pow+0x420>
 8002f60:	a39d      	add	r3, pc, #628	; (adr r3, 80031d8 <__ieee754_pow+0x9c8>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	4640      	mov	r0, r8
 8002f68:	4649      	mov	r1, r9
 8002f6a:	f7fd f8f7 	bl	800015c <__adddf3>
 8002f6e:	4622      	mov	r2, r4
 8002f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002f74:	462b      	mov	r3, r5
 8002f76:	4650      	mov	r0, sl
 8002f78:	4639      	mov	r1, r7
 8002f7a:	f7fd f8ed 	bl	8000158 <__aeabi_dsub>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f86:	f7fd fd2f 	bl	80009e8 <__aeabi_dcmpgt>
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	f47f ae01 	bne.w	8002b92 <__ieee754_pow+0x382>
 8002f90:	4aa5      	ldr	r2, [pc, #660]	; (8003228 <__ieee754_pow+0xa18>)
 8002f92:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8002f96:	4293      	cmp	r3, r2
 8002f98:	f340 8103 	ble.w	80031a2 <__ieee754_pow+0x992>
 8002f9c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	151b      	asrs	r3, r3, #20
 8002fa4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002fa8:	fa4a f303 	asr.w	r3, sl, r3
 8002fac:	4433      	add	r3, r6
 8002fae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002fb2:	4f9e      	ldr	r7, [pc, #632]	; (800322c <__ieee754_pow+0xa1c>)
 8002fb4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002fb8:	4117      	asrs	r7, r2
 8002fba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002fbe:	ea23 0107 	bic.w	r1, r3, r7
 8002fc2:	f1c2 0214 	rsb	r2, r2, #20
 8002fc6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002fca:	460b      	mov	r3, r1
 8002fcc:	fa4a fa02 	asr.w	sl, sl, r2
 8002fd0:	2e00      	cmp	r6, #0
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	bfb8      	it	lt
 8002fda:	f1ca 0a00 	rsblt	sl, sl, #0
 8002fde:	f7fd f8bb 	bl	8000158 <__aeabi_dsub>
 8002fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fea:	2400      	movs	r4, #0
 8002fec:	4642      	mov	r2, r8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	f7fd f8b4 	bl	800015c <__adddf3>
 8002ff4:	a37a      	add	r3, pc, #488	; (adr r3, 80031e0 <__ieee754_pow+0x9d0>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	460d      	mov	r5, r1
 8002ffe:	f7fd fa63 	bl	80004c8 <__aeabi_dmul>
 8003002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003006:	4606      	mov	r6, r0
 8003008:	460f      	mov	r7, r1
 800300a:	4620      	mov	r0, r4
 800300c:	4629      	mov	r1, r5
 800300e:	f7fd f8a3 	bl	8000158 <__aeabi_dsub>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4640      	mov	r0, r8
 8003018:	4649      	mov	r1, r9
 800301a:	f7fd f89d 	bl	8000158 <__aeabi_dsub>
 800301e:	a372      	add	r3, pc, #456	; (adr r3, 80031e8 <__ieee754_pow+0x9d8>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd fa50 	bl	80004c8 <__aeabi_dmul>
 8003028:	a371      	add	r3, pc, #452	; (adr r3, 80031f0 <__ieee754_pow+0x9e0>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	4680      	mov	r8, r0
 8003030:	4689      	mov	r9, r1
 8003032:	4620      	mov	r0, r4
 8003034:	4629      	mov	r1, r5
 8003036:	f7fd fa47 	bl	80004c8 <__aeabi_dmul>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4640      	mov	r0, r8
 8003040:	4649      	mov	r1, r9
 8003042:	f7fd f88b 	bl	800015c <__adddf3>
 8003046:	4604      	mov	r4, r0
 8003048:	460d      	mov	r5, r1
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4630      	mov	r0, r6
 8003050:	4639      	mov	r1, r7
 8003052:	f7fd f883 	bl	800015c <__adddf3>
 8003056:	4632      	mov	r2, r6
 8003058:	463b      	mov	r3, r7
 800305a:	4680      	mov	r8, r0
 800305c:	4689      	mov	r9, r1
 800305e:	f7fd f87b 	bl	8000158 <__aeabi_dsub>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4620      	mov	r0, r4
 8003068:	4629      	mov	r1, r5
 800306a:	f7fd f875 	bl	8000158 <__aeabi_dsub>
 800306e:	4642      	mov	r2, r8
 8003070:	4606      	mov	r6, r0
 8003072:	460f      	mov	r7, r1
 8003074:	464b      	mov	r3, r9
 8003076:	4640      	mov	r0, r8
 8003078:	4649      	mov	r1, r9
 800307a:	f7fd fa25 	bl	80004c8 <__aeabi_dmul>
 800307e:	a35e      	add	r3, pc, #376	; (adr r3, 80031f8 <__ieee754_pow+0x9e8>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	4604      	mov	r4, r0
 8003086:	460d      	mov	r5, r1
 8003088:	f7fd fa1e 	bl	80004c8 <__aeabi_dmul>
 800308c:	a35c      	add	r3, pc, #368	; (adr r3, 8003200 <__ieee754_pow+0x9f0>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd f861 	bl	8000158 <__aeabi_dsub>
 8003096:	4622      	mov	r2, r4
 8003098:	462b      	mov	r3, r5
 800309a:	f7fd fa15 	bl	80004c8 <__aeabi_dmul>
 800309e:	a35a      	add	r3, pc, #360	; (adr r3, 8003208 <__ieee754_pow+0x9f8>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd f85a 	bl	800015c <__adddf3>
 80030a8:	4622      	mov	r2, r4
 80030aa:	462b      	mov	r3, r5
 80030ac:	f7fd fa0c 	bl	80004c8 <__aeabi_dmul>
 80030b0:	a357      	add	r3, pc, #348	; (adr r3, 8003210 <__ieee754_pow+0xa00>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f7fd f84f 	bl	8000158 <__aeabi_dsub>
 80030ba:	4622      	mov	r2, r4
 80030bc:	462b      	mov	r3, r5
 80030be:	f7fd fa03 	bl	80004c8 <__aeabi_dmul>
 80030c2:	a355      	add	r3, pc, #340	; (adr r3, 8003218 <__ieee754_pow+0xa08>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f7fd f848 	bl	800015c <__adddf3>
 80030cc:	4622      	mov	r2, r4
 80030ce:	462b      	mov	r3, r5
 80030d0:	f7fd f9fa 	bl	80004c8 <__aeabi_dmul>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4640      	mov	r0, r8
 80030da:	4649      	mov	r1, r9
 80030dc:	f7fd f83c 	bl	8000158 <__aeabi_dsub>
 80030e0:	4604      	mov	r4, r0
 80030e2:	460d      	mov	r5, r1
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4640      	mov	r0, r8
 80030ea:	4649      	mov	r1, r9
 80030ec:	f7fd f9ec 	bl	80004c8 <__aeabi_dmul>
 80030f0:	2200      	movs	r2, #0
 80030f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030fa:	4620      	mov	r0, r4
 80030fc:	4629      	mov	r1, r5
 80030fe:	f7fd f82b 	bl	8000158 <__aeabi_dsub>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800310a:	f7fd fb07 	bl	800071c <__aeabi_ddiv>
 800310e:	4632      	mov	r2, r6
 8003110:	4604      	mov	r4, r0
 8003112:	460d      	mov	r5, r1
 8003114:	463b      	mov	r3, r7
 8003116:	4640      	mov	r0, r8
 8003118:	4649      	mov	r1, r9
 800311a:	f7fd f9d5 	bl	80004c8 <__aeabi_dmul>
 800311e:	4632      	mov	r2, r6
 8003120:	463b      	mov	r3, r7
 8003122:	f7fd f81b 	bl	800015c <__adddf3>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4620      	mov	r0, r4
 800312c:	4629      	mov	r1, r5
 800312e:	f7fd f813 	bl	8000158 <__aeabi_dsub>
 8003132:	4642      	mov	r2, r8
 8003134:	464b      	mov	r3, r9
 8003136:	f7fd f80f 	bl	8000158 <__aeabi_dsub>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	2000      	movs	r0, #0
 8003140:	493b      	ldr	r1, [pc, #236]	; (8003230 <__ieee754_pow+0xa20>)
 8003142:	f7fd f809 	bl	8000158 <__aeabi_dsub>
 8003146:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800314a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800314e:	da2b      	bge.n	80031a8 <__ieee754_pow+0x998>
 8003150:	4652      	mov	r2, sl
 8003152:	f000 f9b9 	bl	80034c8 <scalbn>
 8003156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800315a:	f7ff bbf2 	b.w	8002942 <__ieee754_pow+0x132>
 800315e:	4b35      	ldr	r3, [pc, #212]	; (8003234 <__ieee754_pow+0xa24>)
 8003160:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003164:	429f      	cmp	r7, r3
 8003166:	f77f af13 	ble.w	8002f90 <__ieee754_pow+0x780>
 800316a:	4b33      	ldr	r3, [pc, #204]	; (8003238 <__ieee754_pow+0xa28>)
 800316c:	440b      	add	r3, r1
 800316e:	4303      	orrs	r3, r0
 8003170:	d00b      	beq.n	800318a <__ieee754_pow+0x97a>
 8003172:	a32b      	add	r3, pc, #172	; (adr r3, 8003220 <__ieee754_pow+0xa10>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	e9dd 0100 	ldrd	r0, r1, [sp]
 800317c:	f7fd f9a4 	bl	80004c8 <__aeabi_dmul>
 8003180:	a327      	add	r3, pc, #156	; (adr r3, 8003220 <__ieee754_pow+0xa10>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f7ff bbdc 	b.w	8002942 <__ieee754_pow+0x132>
 800318a:	4622      	mov	r2, r4
 800318c:	462b      	mov	r3, r5
 800318e:	f7fc ffe3 	bl	8000158 <__aeabi_dsub>
 8003192:	4642      	mov	r2, r8
 8003194:	464b      	mov	r3, r9
 8003196:	f7fd fc1d 	bl	80009d4 <__aeabi_dcmpge>
 800319a:	2800      	cmp	r0, #0
 800319c:	f43f aef8 	beq.w	8002f90 <__ieee754_pow+0x780>
 80031a0:	e7e7      	b.n	8003172 <__ieee754_pow+0x962>
 80031a2:	f04f 0a00 	mov.w	sl, #0
 80031a6:	e71e      	b.n	8002fe6 <__ieee754_pow+0x7d6>
 80031a8:	4621      	mov	r1, r4
 80031aa:	e7d4      	b.n	8003156 <__ieee754_pow+0x946>
 80031ac:	f04f 0b00 	mov.w	fp, #0
 80031b0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8003230 <__ieee754_pow+0xa20>
 80031b4:	f7ff bbb0 	b.w	8002918 <__ieee754_pow+0x108>
 80031b8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80031bc:	f7ff bbac 	b.w	8002918 <__ieee754_pow+0x108>
 80031c0:	4638      	mov	r0, r7
 80031c2:	4641      	mov	r1, r8
 80031c4:	f7ff bbbf 	b.w	8002946 <__ieee754_pow+0x136>
 80031c8:	9200      	str	r2, [sp, #0]
 80031ca:	f7ff bb7f 	b.w	80028cc <__ieee754_pow+0xbc>
 80031ce:	2300      	movs	r3, #0
 80031d0:	f7ff bb69 	b.w	80028a6 <__ieee754_pow+0x96>
 80031d4:	f3af 8000 	nop.w
 80031d8:	652b82fe 	.word	0x652b82fe
 80031dc:	3c971547 	.word	0x3c971547
 80031e0:	00000000 	.word	0x00000000
 80031e4:	3fe62e43 	.word	0x3fe62e43
 80031e8:	fefa39ef 	.word	0xfefa39ef
 80031ec:	3fe62e42 	.word	0x3fe62e42
 80031f0:	0ca86c39 	.word	0x0ca86c39
 80031f4:	be205c61 	.word	0xbe205c61
 80031f8:	72bea4d0 	.word	0x72bea4d0
 80031fc:	3e663769 	.word	0x3e663769
 8003200:	c5d26bf1 	.word	0xc5d26bf1
 8003204:	3ebbbd41 	.word	0x3ebbbd41
 8003208:	af25de2c 	.word	0xaf25de2c
 800320c:	3f11566a 	.word	0x3f11566a
 8003210:	16bebd93 	.word	0x16bebd93
 8003214:	3f66c16c 	.word	0x3f66c16c
 8003218:	5555553e 	.word	0x5555553e
 800321c:	3fc55555 	.word	0x3fc55555
 8003220:	c2f8f359 	.word	0xc2f8f359
 8003224:	01a56e1f 	.word	0x01a56e1f
 8003228:	3fe00000 	.word	0x3fe00000
 800322c:	000fffff 	.word	0x000fffff
 8003230:	3ff00000 	.word	0x3ff00000
 8003234:	4090cbff 	.word	0x4090cbff
 8003238:	3f6f3400 	.word	0x3f6f3400

0800323c <__ieee754_sqrt>:
 800323c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8003390 <__ieee754_sqrt+0x154>
 8003240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003244:	ea3c 0c01 	bics.w	ip, ip, r1
 8003248:	460b      	mov	r3, r1
 800324a:	4606      	mov	r6, r0
 800324c:	460d      	mov	r5, r1
 800324e:	460a      	mov	r2, r1
 8003250:	4607      	mov	r7, r0
 8003252:	4604      	mov	r4, r0
 8003254:	d10e      	bne.n	8003274 <__ieee754_sqrt+0x38>
 8003256:	4602      	mov	r2, r0
 8003258:	f7fd f936 	bl	80004c8 <__aeabi_dmul>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4630      	mov	r0, r6
 8003262:	4629      	mov	r1, r5
 8003264:	f7fc ff7a 	bl	800015c <__adddf3>
 8003268:	4606      	mov	r6, r0
 800326a:	460d      	mov	r5, r1
 800326c:	4630      	mov	r0, r6
 800326e:	4629      	mov	r1, r5
 8003270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003274:	2900      	cmp	r1, #0
 8003276:	dc0d      	bgt.n	8003294 <__ieee754_sqrt+0x58>
 8003278:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800327c:	ea5c 0707 	orrs.w	r7, ip, r7
 8003280:	d0f4      	beq.n	800326c <__ieee754_sqrt+0x30>
 8003282:	b139      	cbz	r1, 8003294 <__ieee754_sqrt+0x58>
 8003284:	4602      	mov	r2, r0
 8003286:	f7fc ff67 	bl	8000158 <__aeabi_dsub>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	f7fd fa45 	bl	800071c <__aeabi_ddiv>
 8003292:	e7e9      	b.n	8003268 <__ieee754_sqrt+0x2c>
 8003294:	1512      	asrs	r2, r2, #20
 8003296:	d074      	beq.n	8003382 <__ieee754_sqrt+0x146>
 8003298:	2000      	movs	r0, #0
 800329a:	07d5      	lsls	r5, r2, #31
 800329c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032a0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80032a4:	bf5e      	ittt	pl
 80032a6:	0fe3      	lsrpl	r3, r4, #31
 80032a8:	0064      	lslpl	r4, r4, #1
 80032aa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80032ae:	0fe3      	lsrs	r3, r4, #31
 80032b0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80032b4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80032b8:	2516      	movs	r5, #22
 80032ba:	4601      	mov	r1, r0
 80032bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032c0:	1076      	asrs	r6, r6, #1
 80032c2:	0064      	lsls	r4, r4, #1
 80032c4:	188f      	adds	r7, r1, r2
 80032c6:	429f      	cmp	r7, r3
 80032c8:	bfde      	ittt	le
 80032ca:	1bdb      	suble	r3, r3, r7
 80032cc:	18b9      	addle	r1, r7, r2
 80032ce:	1880      	addle	r0, r0, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	3d01      	subs	r5, #1
 80032d4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80032d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80032dc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80032e0:	d1f0      	bne.n	80032c4 <__ieee754_sqrt+0x88>
 80032e2:	462a      	mov	r2, r5
 80032e4:	f04f 0e20 	mov.w	lr, #32
 80032e8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80032ec:	428b      	cmp	r3, r1
 80032ee:	eb07 0c05 	add.w	ip, r7, r5
 80032f2:	dc02      	bgt.n	80032fa <__ieee754_sqrt+0xbe>
 80032f4:	d113      	bne.n	800331e <__ieee754_sqrt+0xe2>
 80032f6:	45a4      	cmp	ip, r4
 80032f8:	d811      	bhi.n	800331e <__ieee754_sqrt+0xe2>
 80032fa:	f1bc 0f00 	cmp.w	ip, #0
 80032fe:	eb0c 0507 	add.w	r5, ip, r7
 8003302:	da43      	bge.n	800338c <__ieee754_sqrt+0x150>
 8003304:	2d00      	cmp	r5, #0
 8003306:	db41      	blt.n	800338c <__ieee754_sqrt+0x150>
 8003308:	f101 0801 	add.w	r8, r1, #1
 800330c:	1a5b      	subs	r3, r3, r1
 800330e:	4641      	mov	r1, r8
 8003310:	45a4      	cmp	ip, r4
 8003312:	bf88      	it	hi
 8003314:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003318:	eba4 040c 	sub.w	r4, r4, ip
 800331c:	443a      	add	r2, r7
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	f1be 0e01 	subs.w	lr, lr, #1
 8003324:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003328:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800332c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003330:	d1dc      	bne.n	80032ec <__ieee754_sqrt+0xb0>
 8003332:	4323      	orrs	r3, r4
 8003334:	d006      	beq.n	8003344 <__ieee754_sqrt+0x108>
 8003336:	1c54      	adds	r4, r2, #1
 8003338:	bf0b      	itete	eq
 800333a:	4672      	moveq	r2, lr
 800333c:	3201      	addne	r2, #1
 800333e:	3001      	addeq	r0, #1
 8003340:	f022 0201 	bicne.w	r2, r2, #1
 8003344:	1043      	asrs	r3, r0, #1
 8003346:	07c1      	lsls	r1, r0, #31
 8003348:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800334c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003350:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003354:	bf48      	it	mi
 8003356:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800335a:	4610      	mov	r0, r2
 800335c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003360:	e782      	b.n	8003268 <__ieee754_sqrt+0x2c>
 8003362:	0ae3      	lsrs	r3, r4, #11
 8003364:	3915      	subs	r1, #21
 8003366:	0564      	lsls	r4, r4, #21
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0fa      	beq.n	8003362 <__ieee754_sqrt+0x126>
 800336c:	02de      	lsls	r6, r3, #11
 800336e:	d50a      	bpl.n	8003386 <__ieee754_sqrt+0x14a>
 8003370:	f1c2 0020 	rsb	r0, r2, #32
 8003374:	fa24 f000 	lsr.w	r0, r4, r0
 8003378:	1e55      	subs	r5, r2, #1
 800337a:	4094      	lsls	r4, r2
 800337c:	4303      	orrs	r3, r0
 800337e:	1b4a      	subs	r2, r1, r5
 8003380:	e78a      	b.n	8003298 <__ieee754_sqrt+0x5c>
 8003382:	4611      	mov	r1, r2
 8003384:	e7f0      	b.n	8003368 <__ieee754_sqrt+0x12c>
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	3201      	adds	r2, #1
 800338a:	e7ef      	b.n	800336c <__ieee754_sqrt+0x130>
 800338c:	4688      	mov	r8, r1
 800338e:	e7bd      	b.n	800330c <__ieee754_sqrt+0xd0>
 8003390:	7ff00000 	.word	0x7ff00000

08003394 <fabs>:
 8003394:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003398:	4770      	bx	lr

0800339a <finite>:
 800339a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800339e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80033a2:	0fc0      	lsrs	r0, r0, #31
 80033a4:	4770      	bx	lr
	...

080033a8 <nan>:
 80033a8:	2000      	movs	r0, #0
 80033aa:	4901      	ldr	r1, [pc, #4]	; (80033b0 <nan+0x8>)
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	7ff80000 	.word	0x7ff80000

080033b4 <rint>:
 80033b4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80033b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ba:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80033be:	2f13      	cmp	r7, #19
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	460c      	mov	r4, r1
 80033c6:	4605      	mov	r5, r0
 80033c8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80033cc:	dc59      	bgt.n	8003482 <rint+0xce>
 80033ce:	2f00      	cmp	r7, #0
 80033d0:	da2a      	bge.n	8003428 <rint+0x74>
 80033d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80033d6:	4301      	orrs	r1, r0
 80033d8:	d022      	beq.n	8003420 <rint+0x6c>
 80033da:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80033de:	4301      	orrs	r1, r0
 80033e0:	424d      	negs	r5, r1
 80033e2:	430d      	orrs	r5, r1
 80033e4:	4936      	ldr	r1, [pc, #216]	; (80034c0 <rint+0x10c>)
 80033e6:	0c5c      	lsrs	r4, r3, #17
 80033e8:	0b2d      	lsrs	r5, r5, #12
 80033ea:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80033ee:	0464      	lsls	r4, r4, #17
 80033f0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80033f4:	ea45 0304 	orr.w	r3, r5, r4
 80033f8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fc feac 	bl	800015c <__adddf3>
 8003404:	e9cd 0100 	strd	r0, r1, [sp]
 8003408:	e9dd 0100 	ldrd	r0, r1, [sp]
 800340c:	462b      	mov	r3, r5
 800340e:	4622      	mov	r2, r4
 8003410:	f7fc fea2 	bl	8000158 <__aeabi_dsub>
 8003414:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003418:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	4926      	ldr	r1, [pc, #152]	; (80034c4 <rint+0x110>)
 800342a:	4139      	asrs	r1, r7
 800342c:	ea03 0001 	and.w	r0, r3, r1
 8003430:	4310      	orrs	r0, r2
 8003432:	d0f5      	beq.n	8003420 <rint+0x6c>
 8003434:	084b      	lsrs	r3, r1, #1
 8003436:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800343a:	ea52 0501 	orrs.w	r5, r2, r1
 800343e:	d00c      	beq.n	800345a <rint+0xa6>
 8003440:	ea24 0303 	bic.w	r3, r4, r3
 8003444:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003448:	2f13      	cmp	r7, #19
 800344a:	bf0c      	ite	eq
 800344c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8003450:	2500      	movne	r5, #0
 8003452:	fa44 f707 	asr.w	r7, r4, r7
 8003456:	ea43 0407 	orr.w	r4, r3, r7
 800345a:	4919      	ldr	r1, [pc, #100]	; (80034c0 <rint+0x10c>)
 800345c:	4623      	mov	r3, r4
 800345e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8003462:	462a      	mov	r2, r5
 8003464:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003468:	4620      	mov	r0, r4
 800346a:	4629      	mov	r1, r5
 800346c:	f7fc fe76 	bl	800015c <__adddf3>
 8003470:	e9cd 0100 	strd	r0, r1, [sp]
 8003474:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003478:	4622      	mov	r2, r4
 800347a:	462b      	mov	r3, r5
 800347c:	f7fc fe6c 	bl	8000158 <__aeabi_dsub>
 8003480:	e7cc      	b.n	800341c <rint+0x68>
 8003482:	2f33      	cmp	r7, #51	; 0x33
 8003484:	dd05      	ble.n	8003492 <rint+0xde>
 8003486:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800348a:	d1c9      	bne.n	8003420 <rint+0x6c>
 800348c:	f7fc fe66 	bl	800015c <__adddf3>
 8003490:	e7c4      	b.n	800341c <rint+0x68>
 8003492:	f04f 31ff 	mov.w	r1, #4294967295
 8003496:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800349a:	fa21 f10c 	lsr.w	r1, r1, ip
 800349e:	4208      	tst	r0, r1
 80034a0:	d0be      	beq.n	8003420 <rint+0x6c>
 80034a2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80034a6:	bf18      	it	ne
 80034a8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80034ac:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80034b0:	bf1e      	ittt	ne
 80034b2:	ea20 0303 	bicne.w	r3, r0, r3
 80034b6:	fa45 fc0c 	asrne.w	ip, r5, ip
 80034ba:	ea43 050c 	orrne.w	r5, r3, ip
 80034be:	e7cc      	b.n	800345a <rint+0xa6>
 80034c0:	08003648 	.word	0x08003648
 80034c4:	000fffff 	.word	0x000fffff

080034c8 <scalbn>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80034ce:	4604      	mov	r4, r0
 80034d0:	460d      	mov	r5, r1
 80034d2:	4617      	mov	r7, r2
 80034d4:	460b      	mov	r3, r1
 80034d6:	b996      	cbnz	r6, 80034fe <scalbn+0x36>
 80034d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80034dc:	4303      	orrs	r3, r0
 80034de:	d039      	beq.n	8003554 <scalbn+0x8c>
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <scalbn+0xf0>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	f7fc fff0 	bl	80004c8 <__aeabi_dmul>
 80034e8:	4b34      	ldr	r3, [pc, #208]	; (80035bc <scalbn+0xf4>)
 80034ea:	4604      	mov	r4, r0
 80034ec:	429f      	cmp	r7, r3
 80034ee:	460d      	mov	r5, r1
 80034f0:	da0f      	bge.n	8003512 <scalbn+0x4a>
 80034f2:	a32d      	add	r3, pc, #180	; (adr r3, 80035a8 <scalbn+0xe0>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f7fc ffe6 	bl	80004c8 <__aeabi_dmul>
 80034fc:	e006      	b.n	800350c <scalbn+0x44>
 80034fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003502:	4296      	cmp	r6, r2
 8003504:	d10a      	bne.n	800351c <scalbn+0x54>
 8003506:	4602      	mov	r2, r0
 8003508:	f7fc fe28 	bl	800015c <__adddf3>
 800350c:	4604      	mov	r4, r0
 800350e:	460d      	mov	r5, r1
 8003510:	e020      	b.n	8003554 <scalbn+0x8c>
 8003512:	460b      	mov	r3, r1
 8003514:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003518:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800351c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003520:	19b9      	adds	r1, r7, r6
 8003522:	4291      	cmp	r1, r2
 8003524:	dd0e      	ble.n	8003544 <scalbn+0x7c>
 8003526:	a322      	add	r3, pc, #136	; (adr r3, 80035b0 <scalbn+0xe8>)
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003530:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003534:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003538:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800353c:	4820      	ldr	r0, [pc, #128]	; (80035c0 <scalbn+0xf8>)
 800353e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003542:	e7d9      	b.n	80034f8 <scalbn+0x30>
 8003544:	2900      	cmp	r1, #0
 8003546:	dd08      	ble.n	800355a <scalbn+0x92>
 8003548:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800354c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003550:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800355a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800355e:	da16      	bge.n	800358e <scalbn+0xc6>
 8003560:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003564:	429f      	cmp	r7, r3
 8003566:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800356a:	dd08      	ble.n	800357e <scalbn+0xb6>
 800356c:	4c15      	ldr	r4, [pc, #84]	; (80035c4 <scalbn+0xfc>)
 800356e:	4814      	ldr	r0, [pc, #80]	; (80035c0 <scalbn+0xf8>)
 8003570:	f363 74df 	bfi	r4, r3, #31, #1
 8003574:	a30e      	add	r3, pc, #56	; (adr r3, 80035b0 <scalbn+0xe8>)
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	4621      	mov	r1, r4
 800357c:	e7bc      	b.n	80034f8 <scalbn+0x30>
 800357e:	4c12      	ldr	r4, [pc, #72]	; (80035c8 <scalbn+0x100>)
 8003580:	4812      	ldr	r0, [pc, #72]	; (80035cc <scalbn+0x104>)
 8003582:	f363 74df 	bfi	r4, r3, #31, #1
 8003586:	a308      	add	r3, pc, #32	; (adr r3, 80035a8 <scalbn+0xe0>)
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	e7f5      	b.n	800357a <scalbn+0xb2>
 800358e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003592:	3136      	adds	r1, #54	; 0x36
 8003594:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003598:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800359c:	4620      	mov	r0, r4
 800359e:	4629      	mov	r1, r5
 80035a0:	2200      	movs	r2, #0
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <scalbn+0x108>)
 80035a4:	e7a8      	b.n	80034f8 <scalbn+0x30>
 80035a6:	bf00      	nop
 80035a8:	c2f8f359 	.word	0xc2f8f359
 80035ac:	01a56e1f 	.word	0x01a56e1f
 80035b0:	8800759c 	.word	0x8800759c
 80035b4:	7e37e43c 	.word	0x7e37e43c
 80035b8:	43500000 	.word	0x43500000
 80035bc:	ffff3cb0 	.word	0xffff3cb0
 80035c0:	8800759c 	.word	0x8800759c
 80035c4:	7e37e43c 	.word	0x7e37e43c
 80035c8:	01a56e1f 	.word	0x01a56e1f
 80035cc:	c2f8f359 	.word	0xc2f8f359
 80035d0:	3c900000 	.word	0x3c900000

080035d4 <_init>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr

080035e0 <_fini>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	bf00      	nop
 80035e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e6:	bc08      	pop	{r3}
 80035e8:	469e      	mov	lr, r3
 80035ea:	4770      	bx	lr
